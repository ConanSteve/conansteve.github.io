<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux命令详解之mv</title>
      <link href="/2022/04/01/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/mv/"/>
      <url>/2022/04/01/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/mv/</url>
      
        <content type="html"><![CDATA[<h1 id="移动文件或文件夹"><a href="#移动文件或文件夹" class="headerlink" title="移动文件或文件夹"></a>移动文件或文件夹</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 旧文件/目录 新文件名/目录</span><br></pre></td></tr></table></figure><h1 id="重命名文件或文件夹"><a href="#重命名文件或文件夹" class="headerlink" title="重命名文件或文件夹"></a>重命名文件或文件夹</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv oldName newName </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过hexo搭建个人博客</title>
      <link href="/2022/04/01/Notebooks/ComputerScience/Tools/BlogWebsite/build-my-blog-by-hexo/"/>
      <url>/2022/04/01/Notebooks/ComputerScience/Tools/BlogWebsite/build-my-blog-by-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="搭建自己的个人博客总体来说有三种选择"><a href="#搭建自己的个人博客总体来说有三种选择" class="headerlink" title="搭建自己的个人博客总体来说有三种选择"></a>搭建自己的个人博客总体来说有三种选择</h2><h3 id="1-使用现有的"><a href="#1-使用现有的" class="headerlink" title="1. 使用现有的"></a>1. 使用现有的</h3><p>现在市面上的博客有很多，如CSDN，博客园，简书等平台。都可以直接在上面发表自己的博客，用户交互也做的很好，写的文章在各大搜索引擎下也能搜索的到，比如百度、搜狗等。但是缺点是不太自由，会受到平台的各种限制和很多烦人的广告。</p><h3 id="2-自己购买域名和服务器"><a href="#2-自己购买域名和服务器" class="headerlink" title="2. 自己购买域名和服务器"></a>2. 自己购买域名和服务器</h3><p>这种方式搭建博客的成本比较高，购买成本，还有花费力气自己搭这么一个网站，并且需要定期的维护它，对于我们大多数人来说，实在是没有这样的精力和时间。</p><h3 id="3-使用GitHub-Page平台"><a href="#3-使用GitHub-Page平台" class="headerlink" title="3. 使用GitHub Page平台"></a>3. 使用GitHub Page平台</h3><p>第三种选择，直接在GitHub Page平台上托管我们的博客。这样就可以安心的来写作，又不需要定期维护，而且hexo作为一个快速简洁的博客框架，用它来搭建博客真的非常容易。</p><h2 id="本教程分三个部分"><a href="#本教程分三个部分" class="headerlink" title="本教程分三个部分"></a>本教程分三个部分</h2><p>本教程大部分是通过网络进行收集，并结合我个人的一些理解编写的。</p><ul><li>第一部分：hexo的搭建并部署到GitHub Page上，以及个人域名的绑定。</li><li>第二部分：hexo的基本配置，更换主题，实现多终端工作，以及在coding page部署实现国内外分流</li><li>第三部分：hexo添加各种功能，包括搜索的SEO，阅读量统计，访问量统计和评论系统等。</li></ul><h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>hexo的搭建并部署到GitHub Page上，以及个人域名的绑定。</p><h3 id="hexo-简介"><a href="#hexo-简介" class="headerlink" title="hexo 简介"></a>hexo 简介</h3><p>hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h3 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h3><ol><li>安装Git</li><li>安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h4 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h4><p>Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。Git非常强大，我觉得建议每个人都去<a href="https://git-scm.com/">Git官网</a>了解一下。</p><ul><li>windows：到git官网上下载，<a href="https://git-scm.com/downloads">Download git</a>，下载后会有一个Git Bash的命令行工具，以后就用这个工具来使用git。</li><li>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>安装好后，用 <code>git --version</code> 来查看一下版本</p><h4 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h4><p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p><ul><li>windows：nodejs选择LTS版本就行了。<a href="https://nodejs.org/en/download/">node.js LTS Download</a></li><li>linux：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nodejssudo apt-get install npm</span><br></pre></td></tr></table></figure><p>安装完后，打开命令行查看版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -vnpm -v</span><br></pre></td></tr></table></figure><p>检查一下有没有安装成功</p><p>顺便说一下，windows在git安装完后，就可以直接使用git bash来敲命令行了，不用自带的cmd，cmd有点难用。</p><h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h4><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>依旧用 <code>hexo -v</code>查看一下版本</p><p>至此hexo的环境就部署完了。</p><p>接下来初始化一下hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br></pre></td></tr></table></figure><p>这个myBlog可以自己取什么名字都行，然后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd myBlog //进入这个myBlog文件夹npm install</span><br></pre></td></tr></table></figure><p>新建完成后，文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml：config.yml: 博客的配置文件</li></ul><p>启动hexo服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo server</span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000 就可以看到你生成的博客了。</p><p>使用ctrl+c可以把服务关掉。</p><h4 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h4><p>首先，你先要有一个GitHub账户，没有请注册。<a href="https://github.com/">GitHub官网</a></p><p>注册完登录后，在GitHub.com中看到一个New repository，新建仓库</p><p>创建一个和你用户名相同的仓库，后面加.github.io，比如你注册的用户名叫 zhangsan，那么你创建的仓库名就叫 zhangsan.github.io，只有这样，将来要部署到GitHub Page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。</p><p>点击create repository。</p><h4 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h4><p>回到你的git bash中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这里的yourname输入你的GitHub用户名，youremail输入你GitHub的邮箱。这样GitHub才能知道你是不是对应它的账户。</p><p>可以用以下两条，检查一下你有没有输对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config user.namegit config user.email</span><br></pre></td></tr></table></figure><p>然后输入下面的命令，创建SSH,一路回车就可以了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。</p><p>ssh，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>而后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key<br>把你的id_rsa.pub里面的信息复制进去。</p><p>在gitbash中，查看是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h4 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h4><p>这一步，我们将hexo和GitHub关联起来，也就是将hexo生成的文章部署到GitHub上，打开站点配置文件_config.yml，翻到最后，修改为<br>YourgithubName就是你的GitHub账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:  type: git  repo: https://github.com/**YourgithubName**/**YourgithubName**.github.io.git  branch: master</span><br></pre></td></tr></table></figure><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>其中 hexo clean清除了你之前生成的东西，也可以不加。<br>hexo generate 顾名思义，生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写<br>此处命令可以用一条命令代替，然后等它全部执行完就部署到网站上了，不用在哪里等着输下一条命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>注意：第一次使用deploy时会让你你输入GitHub的username和password。</p><p>得到下图就说明部署成功了，过一会儿就可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！！</p><h4 id="7-设置个人域名"><a href="#7-设置个人域名" class="headerlink" title="7. 设置个人域名"></a>7. 设置个人域名</h4><p>现在你的个人网站的地址是 yourname.github.io，如果觉得这个网址逼格不太够，这就需要你设置个人域名了。但是需要花钱。</p><p>注册一个阿里云账户,在阿里云上买一个域名，我买的是 fangzh.top，各个后缀的价格不太一样，比如最广泛的.com就比较贵，看个人喜好咯。</p><p>你需要先去进行实名认证,然后在域名控制台中，看到你购买的域名。</p><p>点解析进去，添加解析。</p><p>其中，192.30.252.153 和 192.30.252.154 是GitHub的服务器地址。<br>注意，解析线路选择默认，不要像我一样选境外。这个境外是后面来做国内外分流用的,在后面的博客中会讲到。记得现在选择默认！！</p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名fangzh.top</p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀。写上你的域名。</p><p>最后，在gitbash中，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>过不了多久，再打开你的浏览器，输入你自己的域名，就可以看到搭建的网站啦！</p><p>接下来你就可以正式开始写文章了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpapername</span><br></pre></td></tr></table></figure><p>然后在source&#x2F;_post中打开markdown文件，就可以开始编辑了。当你写完的时候，再更新一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>就可以看到更新了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>教程总体来说还是比较简单的，用心花费点时间就能搭建好。当然如果你有什么不理解的，可以通过在线聊天找到我！</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><ol><li><a href="http://hekun97@github.io/2020/02/16/shi-yong-hexo-da-jian-zi-ji-de-ge-ren-bo-ke-yi/index.html">使用Hexo搭建博客</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>json格式化输出</title>
      <link href="/2022/03/31/Notebooks/ComputerScience/Language/Python/json-format-print/"/>
      <url>/2022/03/31/Notebooks/ComputerScience/Language/Python/json-format-print/</url>
      
        <content type="html"><![CDATA[<h3 id="输出到文件"><a href="#输出到文件" class="headerlink" title="输出到文件"></a>输出到文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dic=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/output.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">json.dump(dic, f, indent=<span class="number">4</span>, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="输出到终端"><a href="#输出到终端" class="headerlink" title="输出到终端"></a>输出到终端</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(json.dumps(dic, sort_keys=<span class="literal">True</span>, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>)))</span><br></pre></td></tr></table></figure><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ul><li>sort_keys：是否按照字典排序（a-z）输出，True代表是，False代表否。</li><li>indent&#x3D;4：设置缩进格数，一般由于Linux的习惯，这里会设置为4。</li><li>separators：设置分隔符，在<code>dic = &#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code>这行代码里可以看到冒号和逗号后面都带了个空格，这也是因为Python的默认格式也是如此，如果不想后面带有空格输出，那就可以设置成<code>separators=(&#39;,&#39;, &#39;:&#39;)</code>，如果想保持原样，可以写成<code>separators=(&#39;, &#39;, &#39;: &#39;)</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人喜欢的hexo主题</title>
      <link href="/2022/03/31/Notebooks/ComputerScience/Tools/BlogWebsite/hexo-theme/"/>
      <url>/2022/03/31/Notebooks/ComputerScience/Tools/BlogWebsite/hexo-theme/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/themes/">Themes | Hexo</a></p><h2 id="butterfly"><a href="#butterfly" class="headerlink" title="butterfly"></a>butterfly</h2><p>install command:  <code>npm i hexo-theme-butterfly</code></p><p>upgrade:  <code>npm update hexo-theme-butterfly</code></p><p>[Demo&amp;Docs](<a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a>)</p><h3 id="推荐实例"><a href="#推荐实例" class="headerlink" title="推荐实例"></a>推荐实例</h3><ul><li><a href="https://bravey.github.io/">https://bravey.github.io</a></li><li></li></ul><h2 id="matery"><a href="#matery" class="headerlink" title="matery"></a>matery</h2><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd themes</span><br><span class="line">git clone git@github.com:blinkfox/hexo-theme-matery.git</span><br><span class="line">mv hexo-theme-matery matery</span><br><span class="line">cd ../</span><br></pre></td></tr></table></figure><p>them copy it to theme folder</p><p><a href="https://github.com/blinkfox/hexo-theme-matery">Github</a></p><p><a href="http://blinkfox.com/">Demo&amp;Docs</a></p><h2 id="yun"><a href="#yun" class="headerlink" title="yun"></a>yun</h2><p>install&amp;upgrade command: <code>npm install hexo-theme-yun@latest</code></p><p><a href="https://github.com/YunYouJun/hexo-theme-yun">Github</a></p><h2 id="fluid"><a href="#fluid" class="headerlink" title="fluid"></a>fluid</h2><p>install command</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">github</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://www.zhihu.com/question/24422335">https://www.zhihu.com/question/24422335</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>终端统计文件夹信息</title>
      <link href="/2022/03/30/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/calc-file-size-and-num/"/>
      <url>/2022/03/30/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/calc-file-size-and-num/</url>
      
        <content type="html"><![CDATA[<p><code>wc</code>命令参数</p><ul><li>-l：仅列出行</li></ul><h3 id="统计文件夹数量"><a href="#统计文件夹数量" class="headerlink" title="统计文件夹数量"></a>统计文件夹数量</h3><p>包括子目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -type d |wc -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/26/hello-world/"/>
      <url>/2022/03/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><ol><li>111111</li><li>22222</li><li>33333</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用字体配置</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/CommonFont/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/CommonFont/</url>
      
        <content type="html"><![CDATA[<h1 id="常用字体配置"><a href="#常用字体配置" class="headerlink" title="常用字体配置"></a>常用字体配置</h1><h2 id="Hack-Nerd-Regular"><a href="#Hack-Nerd-Regular" class="headerlink" title="Hack Nerd Regular"></a>Hack Nerd Regular</h2><p>终端必备字体</p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--monospace</span>: <span class="string">&#x27;Hack Nerd Font Mono&#x27;</span>, <span class="string">&quot;DejaVu Sans Mono&quot;</span>, <span class="string">&#x27;Consolas&#x27;</span>, <span class="string">&quot;Lucida Console&quot;</span>, monospace;</span><br></pre></td></tr></table></figure><h3 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fontFamily: <span class="string">&#x27;Hack Nerd Font Mono, &quot;DejaVu Sans Mono&quot;, Consolas, &quot;Lucida Console&quot;, monospace&#x27;</span>,</span><br></pre></td></tr></table></figure><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hack Nerd <span class="attribute">Font</span> Mono, Monaco, &#x27;Courier New&#x27;, monospace</span><br></pre></td></tr></table></figure><h2 id="Monaco"><a href="#Monaco" class="headerlink" title="Monaco"></a>Monaco</h2><p>适合英文显示的字体，iterm2默认字体</p><h3 id="Typora-1"><a href="#Typora-1" class="headerlink" title="Typora"></a>Typora</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, Helvetica, <span class="string">&quot;Apple Color Emoji&quot;</span>, Arial, sans-serif, <span class="string">&quot;Segoe UI Emoji&quot;</span>, <span class="string">&quot;Segoe UI Symbol&quot;</span>;</span><br><span class="line"><span class="attr">--monospace</span>: <span class="string">&#x27;Monaco&#x27;</span>, <span class="string">&quot;DejaVu Sans Mono&quot;</span>, <span class="string">&#x27;Consolas&#x27;</span>, <span class="string">&quot;Lucida Console&quot;</span>, monospace;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="built_in">var</span>(--font-family);</span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关系数据库的基本使用</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Database/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Database/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.cnblogs.com/alan-lin/p/9966917.html">Windows 安装并配置 MySQL 5.6&#x2F;5.7</a></p><p> <a href="https://blog.csdn.net/wudinaniya/article/details/82455431">windows上同时安装两个版本的mysql数据库</a></p><p><a href="https://dev.mysql.com/downloads/mysql/">mac版mysql下载地址</a></p><h3 id="ubunut安装mysql"><a href="#ubunut安装mysql" class="headerlink" title="ubunut安装mysql"></a>ubunut安装mysql</h3><p><a href="https://blog.csdn.net/ac_dao_di/article/details/48932729">手动安装mysql5.6</a></p><p> <a href="https://www.cnblogs.com/livelab/p/12808150.html">Mysql8</a></p><p> <a href="https://www.iplayio.cn/post/9225021">如何从命令行管理MySQL数据库和用户</a></p><p> <a href="https://www.cnblogs.com/lzwangshubo/p/9977997.html">安装MariaDB</a></p><p><a href="https://blog.csdn.net/silence_xiang/article/details/103472888">Mysql-mysql8创建用户用户并授权-远程访问</a></p><p> <a href="https://www.cnblogs.com/xiaojf/p/11107934.html">远程主机无法访问</a></p><p> <a href="https://blog.csdn.net/yeya24/article/details/81836218">修改字符集</a></p><h2 id="管理Mysql"><a href="#管理Mysql" class="headerlink" title="管理Mysql"></a>管理Mysql</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> if <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">&#x27;fan&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;121212&#x27;</span>;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;fanfan&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="授予数据库权限"><a href="#授予数据库权限" class="headerlink" title="授予数据库权限"></a>授予数据库权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span><span class="operator">*</span>.<span class="operator">*</span><span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;fan&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>5.5本地访问需要单独添加localhost权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> fan<span class="variable">@localhost</span>; </span><br><span class="line">flush privileges; </span><br></pre></td></tr></table></figure><h3 id="访问数据库"><a href="#访问数据库" class="headerlink" title="访问数据库"></a>访问数据库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 172.18.32.92 -u root -p</span><br></pre></td></tr></table></figure><h3 id="授予用户管理指定数据库权限"><a href="#授予用户管理指定数据库权限" class="headerlink" title="授予用户管理指定数据库权限"></a>授予用户管理指定数据库权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> databaseName.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;zhuanzhi_shuqi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[<a href="https://www.cnblogs.com/hxlinux/p/12900503.html]">https://www.cnblogs.com/hxlinux/p/12900503.html]</a></p><p><a href="https://www.cnblogs.com/yaradish/p/10078640.html">查看mysql数据库是否存在某张表及某张表是否存在某个字段</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Git/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="添加提交"><a href="#添加提交" class="headerlink" title="添加提交"></a>添加提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h1 id="从本地创建仓库并上传"><a href="#从本地创建仓库并上传" class="headerlink" title="从本地创建仓库并上传"></a>从本地创建仓库并上传</h1><p>简易的命令行入门教程:<br>Git 全局设置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;ConanSteve&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;270523124@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>创建 git 仓库:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> gittest</span><br><span class="line"><span class="built_in">cd</span> gittest</span><br><span class="line">git init</span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin git@gitee.com:conansteve/gittest.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>已有仓库?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_git_repo</span><br><span class="line">git remote add origin git@gitee.com:conansteve/gittest.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>以后可以直接 <code>git push</code>当前分支到远端</p><h1 id="stash-暂存"><a href="#stash-暂存" class="headerlink" title="stash 暂存"></a>stash 暂存</h1><ol><li><strong>git stash save “save message”</strong>  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</li><li><strong>git stash list</strong>  ：查看stash了哪些存储</li><li>git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</li><li>git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p</li><li>git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个</li><li><strong>git stash pop</strong> ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</li><li>git stash drop stash@{$num} ，丢弃存储，从列表中删除这个存储</li><li>git stash clear ：删除所有缓存的stash</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash save <span class="string">&quot;xxx&quot;</span></span><br><span class="line">git checkout BRANCH_NAME</span><br><span class="line">//do ...</span><br></pre></td></tr></table></figure><h1 id="修改分支名"><a href="#修改分支名" class="headerlink" title="修改分支名"></a>修改分支名</h1><p><strong>The default branch has been renamed!</strong></p><p>main is now named master</p><p>If you have a local clone, you can update it by running the following commands.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -m main master</span><br><span class="line">git fetch origin</span><br><span class="line">git branch -u origin/master master</span><br><span class="line">git remote set-head origin -a</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011536538.png" alt="image-20220329123703987"></p><h1 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h1><h2 id="git-error-remote-origin-already-exists"><a href="#git-error-remote-origin-already-exists" class="headerlink" title="git error: remote origin already exists."></a>git error: remote origin already exists.</h2><p>解决方案</p><ol><li><p>先删除远程 Git 仓库<br> <code>$ git remote rm origin</code></p></li><li><p>再添加远程 Git 仓库</p></li></ol><p>  <code>git remote add origin xxx</code>（xxx是克隆地址）</p><h2 id="Git-status显示乱码"><a href="#Git-status显示乱码" class="headerlink" title="Git status显示乱码"></a>Git status显示乱码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath false</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://segmentfault.com/a/1190000012081004">git本地仓库关联远程仓库的方法</a></li><li><a href="https://www.cnblogs.com/MrSaver/p/12127996.html">合并本地仓库与远程仓库</a></li><li><a href="https://blog.csdn.net/qq_32035241/article/details/105013510">git 使用强制本地仓库和远程仓库合并</a></li><li><a href="https://www.jianshu.com/p/5adc552323ca">git 查看所有远程分支以及同步</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>图数据库的基本使用</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/GraphDatabase/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/GraphDatabase/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>图数据与关系数据库对比</p><table><thead><tr><th><strong>分类</strong></th><th>模型</th><th>优势</th><th>劣势</th><th>举例</th></tr></thead><tbody><tr><td>关系数据库</td><td>表结构</td><td>数据高度结构化，一致性强，软件成熟度高</td><td>面向多跳的关联关系查询低效或不支持</td><td>MySql Oracle SqlServer</td></tr><tr><td>图数据库</td><td>图结构</td><td>针对关联关系的建模，操作非常高效</td><td>高度结构化的数据处理能力不及关系型数据库</td><td>Neo4j TuGraph OrientDB</td></tr></tbody></table><blockquote><p>面对海量数据的存储和处理问题，传统的关系数据库已经无法满足大部分的日常数据储存的需求。图数据库技术可以将关系信息储存为实体、灵活拓展数据模型。由于提供了对关联数据最直接的表达，以及图模型对异构数据天然的包容力。未来，图数据库技术必将成为最为热点的技术之一，为企业存储和分析大规模图数据提供强有力的支持。</p></blockquote><h1 id="Orient-DB"><a href="#Orient-DB" class="headerlink" title="Orient DB"></a>Orient DB</h1><p><a href="https://orientdb.org/">官网org</a></p><p>官方<a href="http://orientdb.com/docs/3.0.x/">DOC</a></p><p> <a href="https://www.tutorialspoint.com/orientdb/index.htm">English tutorial</a></p><p> <a href="https://www.yiibai.com/orientdb/orientdb_overview.html">OrientDB 中文教程</a></p><p> <a href="https://www.w3cschool.cn/orientdb/orientdb_installation.html">中文教程 2</a></p><h1 id="gremlim"><a href="#gremlim" class="headerlink" title="gremlim"></a>gremlim</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>什么是Gremlin？</p><p>Gremlin是一种图数据遍历的接口封装或者框架，类似于关系数据库中的Mybatis，将对于书库的访问操作封装到一套接口当中，使应用开发人员不用关心底层数据库的操作。</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011535193.jpg"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p><a href="http://tinkerpop.apache.org/docs/current/reference/">doc</a></p><p><a href="http://tinkerpop-gremlin.cn/">gremlin中文文档</a></p><p> <a href="https://help.aliyun.com/knowledge_detail/92204.html">gremlin安装</a></p><p><a href="https://blog.csdn.net/javeme/article/details/82631834">深入学习图数据库语言Gremlin 系列文章链接汇总</a></p><ul><li>通过配置文件连接任意图数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:remote connect tinkerpop.server conf/remote.yaml session</span><br><span class="line">:remote console</span><br><span class="line">connect remote:localhost/demodb admin admin</span><br></pre></td></tr></table></figure><ul><li>通过接口连接OrientDB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = org.apache.tinkerpop.gremlin.orientdb.OrientGraph.open(&quot;remote:localhost/mkg&quot;,&quot;admin&quot;,&quot;admin&quot;);</span><br><span class="line">gt = g.traversal()</span><br></pre></td></tr></table></figure><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p><a href="https://blog.csdn.net/weixin_33895695/article/details/88678857?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-4.control">gremlin入门</a> </p><p><a href="https://blog.csdn.net/weixin_42076409/article/details/80856911">gremlin语句详解</a></p><h1 id="管理-1"><a href="#管理-1" class="headerlink" title="管理"></a>管理</h1><p>OrientDB控制台模式：执行<code>sh console.sh</code> ，输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect remote:localhost/test admin admin</span><br></pre></td></tr></table></figure><p>然后执行SQL语句</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><ul><li>创建实体类</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> class Entity extends V</span><br><span class="line"><span class="keyword">create</span> property Entity.name String</span><br></pre></td></tr></table></figure><ul><li>插入记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> CLASS Customer </span><br><span class="line"><span class="keyword">CREATE</span> PROPERTY Customer.id <span class="type">integer</span> </span><br><span class="line"><span class="keyword">CREATE</span> PROPERTY Customer.name String </span><br><span class="line"><span class="keyword">CREATE</span> PROPERTY Customer.age <span class="type">integer</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Customer (id, name, age) <span class="keyword">VALUES</span> (<span class="number">01</span>,<span class="string">&#x27;satish&#x27;</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure><ul><li>查询实体</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> V limit <span class="number">5</span> # <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name limit <span class="number">5</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> #<span class="number">34</span>:<span class="number">823</span>  # <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table_name <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>删除实体记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> VERTEX <span class="keyword">from</span> x_class_name</span><br></pre></td></tr></table></figure><ul><li>删除边</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> edge where @<span class="keyword">class</span>=<span class="string">&#x27;belong_to&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>将关系数据库数据导入图数据库</p><h1 id="PythonGremlin"><a href="#PythonGremlin" class="headerlink" title="PythonGremlin"></a>PythonGremlin</h1><h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><p>如何修改pythongremlin连接指定的数据库？</p><p>修改 ‘config’ 目录下的demodb.properties文件中的 ‘orient-db-name’的值即可</p><blockquote><p>注意：必须先将数据库关闭，再改文件，再重新启动数据库</p></blockquote><h2 id="CRUD-1"><a href="#CRUD-1" class="headerlink" title="CRUD"></a>CRUD</h2><p><a href="https://www.it610.com/article/1280837636361043968.htm">python 操作gremlin</a></p><p><a href="https://pypi.org/project/gremlinpython/">gremlinpython包使用</a></p><p><a href="https://blog.csdn.net/jackandsnow/article/details/100572659">gremlin_python使用及增删查改方法封装</a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gremlinpython==3.5.0</span></span><br><span class="line"><span class="keyword">from</span> gremlin_python <span class="keyword">import</span> statics</span><br><span class="line"><span class="keyword">from</span> gremlin_python.structure.graph <span class="keyword">import</span> Graph</span><br><span class="line"><span class="keyword">from</span> gremlin_python.process.graph_traversal <span class="keyword">import</span> __</span><br><span class="line"><span class="keyword">from</span> gremlin_python.driver.driver_remote_connection <span class="keyword">import</span> DriverRemoteConnection</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph = Graph()</span><br><span class="line">connection = DriverRemoteConnection(<span class="string">&#x27;ws://localhost:8182/gremlin&#x27;</span>,<span class="string">&#x27;g&#x27;</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">g = graph.traversal().withRemote(connection)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>():</span><br><span class="line">    read_xlsx()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addV</span>(<span class="params">vertexType, name</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == <span class="built_in">len</span>(g.V().hasLabel(vertexType).has(<span class="string">&quot;name&quot;</span>,name).valueMap().toList()):</span><br><span class="line">        vertHead = g.addV(vertexType).<span class="built_in">property</span>(<span class="string">&quot;name&quot;</span>,name).<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addE</span>(<span class="params">edgeType, vheadId, vTailId, properties=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    add edge</span></span><br><span class="line"><span class="string">    :param properties: property dict, like &#123;&#x27;p1&#x27;: &#x27;value1&#x27;, &#x27;p2&#x27;: &#x27;value2&#x27;&#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    index_key = vheadId+vTailId</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == <span class="built_in">len</span>(g.E().hasLabel(edgeType).has(<span class="string">&quot;index_key&quot;</span>,index_key).valueMap().toList()):</span><br><span class="line">        edge = g.V(vTailId).as_(<span class="string">&quot;t&quot;</span>).V(vheadId).addE(edgeType).to(<span class="string">&quot;t&quot;</span>).<span class="built_in">property</span>(<span class="string">&quot;index_key&quot;</span>,index_key)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> properties:</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> properties.keys():</span><br><span class="line">                edge.<span class="built_in">property</span>(key, properties.get(key))        </span><br><span class="line">        edge.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_vertex_id</span>(<span class="params">vertexType, name</span>):</span><br><span class="line">    <span class="keyword">return</span> g.V().hasLabel(vertexType).has(<span class="string">&quot;name&quot;</span>,name).<span class="built_in">id</span>().<span class="built_in">next</span>()[<span class="string">&quot;@value&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_xlsx</span>():</span><br><span class="line">    data = xlrd.open_workbook(<span class="string">&quot;triple0707.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#handle first sheet</span></span><br><span class="line">    table0 = data.sheets()[<span class="number">0</span>]</span><br><span class="line">    nrow0 = table0.nrows</span><br><span class="line">    <span class="keyword">for</span> row_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,nrow0-<span class="number">1</span>):</span><br><span class="line">        olympics = table0.cell_value(row_index,<span class="number">0</span>)</span><br><span class="line">        tech_name = table0.cell_value(row_index,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        addV(<span class="string">&quot;olympics&quot;</span>, olympics)</span><br><span class="line">        addV(<span class="string">&quot;technology&quot;</span>,tech_name)</span><br><span class="line">        vHeadId = get_vertex_id(<span class="string">&quot;olympics&quot;</span>, olympics)</span><br><span class="line">        vTailId = get_vertex_id(<span class="string">&quot;technology&quot;</span>, tech_name)</span><br><span class="line">        addE(<span class="string">&quot;apply&quot;</span>, vHeadId, vTailId)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#handle second sheet</span></span><br><span class="line">    table1 = data.sheets()[<span class="number">1</span>]</span><br><span class="line">    nrow1 = table1.nrows</span><br><span class="line">    <span class="keyword">for</span> row_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,nrow0-<span class="number">1</span>):</span><br><span class="line">        tech_name = table1.cell_value(row_index,<span class="number">0</span>)</span><br><span class="line">        olympics_aspect_2 = table1.cell_value(row_index,<span class="number">2</span>)</span><br><span class="line">        olympics_aspect_1 = table1.cell_value(row_index,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        addV(<span class="string">&quot;technology&quot;</span>,tech_name)</span><br><span class="line">        addV(<span class="string">&quot;olympics_aspect_2&quot;</span>, olympics_aspect_2)</span><br><span class="line">        addV(<span class="string">&quot;olympics_aspect_1&quot;</span>, olympics_aspect_1)</span><br><span class="line">        vHeadId = get_vertex_id(<span class="string">&quot;technology&quot;</span>, tech_name)</span><br><span class="line">        vTailId = get_vertex_id(<span class="string">&quot;olympics_aspect_2&quot;</span>, olympics_aspect_2)</span><br><span class="line">        addE(<span class="string">&quot;support&quot;</span>, vHeadId, vTailId)</span><br><span class="line"></span><br><span class="line">        vHeadId = vTailId</span><br><span class="line">        vTailId = get_vertex_id(<span class="string">&quot;olympics_aspect_1&quot;</span>, olympics_aspect_1)</span><br><span class="line">        addE(<span class="string">&quot;contain&quot;</span>, vHeadId, vTailId)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># handle third sheet</span></span><br><span class="line">    table2 = data.sheets()[<span class="number">2</span>]</span><br><span class="line">    nrow2 = table2.nrows</span><br><span class="line">    <span class="keyword">for</span> row_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,nrow2-<span class="number">1</span>):</span><br><span class="line">        tech_name = table2.cell_value(row_index,<span class="number">0</span>)</span><br><span class="line">        domain_name = table2.cell_value(row_index,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        addV(<span class="string">&quot;technology&quot;</span>, tech_name)</span><br><span class="line">        addV(<span class="string">&quot;technology_domain&quot;</span>,domain_name)</span><br><span class="line">        vHeadId = get_vertex_id(<span class="string">&quot;technology&quot;</span>, tech_name)</span><br><span class="line">        vTailId = get_vertex_id(<span class="string">&quot;technology_domain&quot;</span>, domain_name)</span><br><span class="line">        addE(<span class="string">&quot;belong_to&quot;</span>, vHeadId, vTailId)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># handle fourth sheet</span></span><br><span class="line">    table3 = data.sheets()[<span class="number">3</span>]</span><br><span class="line">    nrow3 = table3.nrows</span><br><span class="line">    <span class="keyword">for</span> row_index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,nrow3-<span class="number">1</span>):</span><br><span class="line">        domain_name = table3.cell_value(row_index,<span class="number">0</span>)</span><br><span class="line">        olympics = table3.cell_value(row_index,<span class="number">2</span>)</span><br><span class="line">        weight = table3.cell_value(row_index,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        addV(<span class="string">&quot;technology_domain&quot;</span>,domain_name)</span><br><span class="line">        addV(<span class="string">&quot;olympics&quot;</span>, olympics)</span><br><span class="line">        vHeadId = get_vertex_id(<span class="string">&quot;technology_domain&quot;</span>, domain_name)</span><br><span class="line">        vTailId = get_vertex_id(<span class="string">&quot;olympics&quot;</span>, olympics)</span><br><span class="line">        addE(<span class="string">&quot;support&quot;</span>, vHeadId, vTailId, properties=&#123;<span class="string">&quot;weight&quot;</span>:weight&#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gremlinpython==3.5.0</span></span><br><span class="line"><span class="keyword">from</span> gremlin_python <span class="keyword">import</span> statics</span><br><span class="line"><span class="keyword">from</span> gremlin_python.structure.graph <span class="keyword">import</span> Graph</span><br><span class="line"><span class="keyword">from</span> gremlin_python.process.graph_traversal <span class="keyword">import</span> __</span><br><span class="line"><span class="keyword">from</span> gremlin_python.driver.driver_remote_connection <span class="keyword">import</span> DriverRemoteConnection</span><br><span class="line"></span><br><span class="line">graph = Graph()</span><br><span class="line">connection = DriverRemoteConnection(<span class="string">&#x27;ws://localhost:8182/gremlin&#x27;</span>,<span class="string">&#x27;g&#x27;</span>, username=<span class="string">&#x27;root&#x27;</span>, password=<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">g = graph.traversal().withRemote(connection)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wiping_out_graph</span>():</span><br><span class="line">    <span class="built_in">print</span>(g.V().count().<span class="built_in">next</span>())</span><br><span class="line">    <span class="built_in">print</span>(g.E().count().<span class="built_in">next</span>())</span><br><span class="line">    g.V().drop().hasNext()</span><br><span class="line">    g.E().drop().hasNext()</span><br><span class="line">    <span class="built_in">print</span>(g.V().count().<span class="built_in">next</span>())</span><br><span class="line">    <span class="built_in">print</span>(g.E().count().<span class="built_in">next</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;graph cleared!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>():</span><br><span class="line">    <span class="comment"># test_addV()</span></span><br><span class="line">    test_addE()</span><br><span class="line">    <span class="comment"># wiping_out_graph()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;count of vertex:&quot;</span>+<span class="built_in">str</span>(g.V().count().<span class="built_in">next</span>()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;count of edge:&quot;</span>+<span class="built_in">str</span>(g.E().count().<span class="built_in">next</span>()))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_vertex</span>(<span class="params">label, filters = <span class="literal">None</span>, properties=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    add vertex</span></span><br><span class="line"><span class="string">    :param label: label, type: str</span></span><br><span class="line"><span class="string">    :param filters: filters , type: dict</span></span><br><span class="line"><span class="string">    :param properties: property dict, like &#123;&#x27;p1&#x27;: &#x27;value1&#x27;, &#x27;p2&#x27;: &#x27;value2&#x27;&#125;</span></span><br><span class="line"><span class="string">    :return: vertex, Vertex(id, label)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    travel = g.V().hasLabel(label)</span><br><span class="line">    <span class="keyword">if</span> filters:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> filters.keys():</span><br><span class="line">            travel = travel.has(key, filters.get(key))</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == travel.count().<span class="built_in">next</span>():</span><br><span class="line">        travel = g.addV(label)</span><br><span class="line">        <span class="keyword">if</span> properties:</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> properties.keys():</span><br><span class="line">                travel.<span class="built_in">property</span>(key, properties.get(key))</span><br><span class="line">        <span class="keyword">return</span> travel.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">label, vheadId, vTailId, properties=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    add edge</span></span><br><span class="line"><span class="string">    :param properties: property dict, like &#123;&#x27;p1&#x27;: &#x27;value1&#x27;, &#x27;p2&#x27;: &#x27;value2&#x27;&#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    index_key = vheadId+vTailId</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == g.E().hasLabel(label).has(<span class="string">&quot;index_key&quot;</span>,index_key).count().<span class="built_in">next</span>():</span><br><span class="line">        edge = g.V(vTailId).as_(<span class="string">&quot;t&quot;</span>).V(vheadId).addE(label).to(<span class="string">&quot;t&quot;</span>).<span class="built_in">property</span>(<span class="string">&quot;index_key&quot;</span>,index_key)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> properties:</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> properties.keys():</span><br><span class="line">                edge.<span class="built_in">property</span>(key, properties.get(key))        </span><br><span class="line">        edge.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop_vertex</span>(<span class="params">v_id=<span class="literal">None</span>, label=<span class="literal">None</span>, properties=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    drop all vertex or specific vertex</span></span><br><span class="line"><span class="string">    :param v_id: long vertex id or Vertex(id, label)</span></span><br><span class="line"><span class="string">    :param label: label, type: str</span></span><br><span class="line"><span class="string">    :param properties: property list, like [&#x27;p1&#x27;, &#x27;p2&#x27;, &#123;&#x27;p3&#x27;: &#x27;value&#x27;&#125;]</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    travel = g.V()</span><br><span class="line">    <span class="keyword">if</span> v_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        travel = travel.hasId(v_id).<span class="built_in">next</span>()</span><br><span class="line">    <span class="keyword">if</span> label:</span><br><span class="line">        travel = travel.hasLabel(label)</span><br><span class="line">    <span class="keyword">if</span> properties:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> properties:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p, <span class="built_in">dict</span>):</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> p.keys():</span><br><span class="line">                    travel = travel.has(key, p.get(key))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                travel = travel.has(p)</span><br><span class="line">    travel.drop().hasNext()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drop_edge</span>(<span class="params">e_id=<span class="literal">None</span>, label=<span class="literal">None</span>, properties=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    drop all edges or specific edge</span></span><br><span class="line"><span class="string">    :param e_id: edge id, type str</span></span><br><span class="line"><span class="string">    :param label: label, type: str</span></span><br><span class="line"><span class="string">    :param properties: property list, like [&#x27;p1&#x27;, &#x27;p2&#x27;, &#123;&#x27;p3&#x27;: &#x27;value&#x27;&#125;]</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    travel = g.E()</span><br><span class="line">    <span class="keyword">if</span> e_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        travel = travel.hasId(e_id)</span><br><span class="line">    <span class="keyword">if</span> label:</span><br><span class="line">        travel = travel.hasLabel(label)</span><br><span class="line">    <span class="keyword">if</span> properties:</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> properties:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(p, <span class="built_in">dict</span>):</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> p.keys():</span><br><span class="line">                    travel = travel.has(key, p.get(key))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                travel = travel.has(p)</span><br><span class="line">    travel.drop().hasNext()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_vertex_id</span>(<span class="params">label, properties=<span class="literal">None</span></span>):</span><br><span class="line">    travel = g.V().hasLabel(label)</span><br><span class="line">    <span class="keyword">if</span> properties:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> properties.keys():</span><br><span class="line">            travel = travel.has(key, properties.get(key))</span><br><span class="line">    <span class="keyword">return</span> travel.<span class="built_in">id</span>().<span class="built_in">next</span>()[<span class="string">&quot;@value&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_addV</span>():</span><br><span class="line">    add_vertex(<span class="string">&quot;person&quot;</span>,filters=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>&#125;, properties = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">15</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;)</span><br><span class="line">    add_vertex(<span class="string">&quot;person&quot;</span>,filters=&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>&#125;, properties = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">15</span>, <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># drop_vertex(label = &quot;person&quot;,properties=[&#123;&quot;name&quot;: &quot;Bob&quot;&#125;])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_addE</span>():</span><br><span class="line">    vHeadId = get_vertex_id(<span class="string">&quot;person&quot;</span>, properties = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>&#125; )</span><br><span class="line">    vTailId = get_vertex_id(<span class="string">&quot;person&quot;</span>, properties = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Tom&quot;</span>&#125; )</span><br><span class="line">    add_edge(<span class="string">&quot;friend&quot;</span>,vHeadId,vTailId)</span><br><span class="line">    <span class="comment"># drop_edge(e_id=&#x27;#137:0&#x27;)</span></span><br><span class="line">    <span class="comment"># drop_edge(label=&#x27;friend&#x27;,properties=[&#123;&quot;index_key&quot;:vHeadId+vTailId&#125;])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># process()</span></span><br><span class="line"><span class="comment"># connection.close()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    connection.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jupyter入门</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Jupyter/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Jupyter/</url>
      
        <content type="html"><![CDATA[<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p><a href="https://www.jianshu.com/p/91365f343585">Jupyter Notebook介绍、安装及使用教程</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="进入笔记"><a href="#进入笔记" class="headerlink" title="进入笔记"></a>进入笔记</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><h3 id="增删虚拟环境"><a href="#增删虚拟环境" class="headerlink" title="增删虚拟环境"></a>增删虚拟环境</h3><blockquote><p> <a href="https://blog.csdn.net/wj1066/article/details/72891667">Jupyter Notebook 增加kernel的方法</a><br><a href="https://blog.csdn.net/liuestcjun/article/details/101981269">Jupyter Notebook导入和删除虚拟环境</a><br><a href="https://blog.csdn.net/liminwang0311/article/details/86565111">在Jupyter Notebook中选择特定的虚拟环境</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda install -n pytorch ipykernel</span><br><span class="line">conda activate pytorch</span><br><span class="line">python -m ipykernel install --user --name pytorch --display-name pytorch3.7</span><br></pre></td></tr></table></figure><p>删除 <code>jupyter kernelspec remove pytorch</code></p><p>显示列表 <code>jupyter kernelspec list</code> </p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/weixin_41923658/article/details/103356336?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">关于 Jupyter Notebook 中 No module named ‘torch’ 的解决办法</a> </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Linux/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="unix系统发展分支图"><a href="#unix系统发展分支图" class="headerlink" title="unix系统发展分支图"></a>unix系统发展分支图</h1><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011530839.png"></p><h1 id="shell-命令"><a href="#shell-命令" class="headerlink" title="shell 命令"></a>shell 命令</h1><p> <a href="https://www.runoob.com/linux/linux-command-manual.html">linux命令大全</a></p><p> <a href="https://blog.csdn.net/sun___shy/article/details/80917092">windows商店安装ubuntu教程</a></p><p> <a href="https://blog.csdn.net/saisai_in_csdn/article/details/106610039">wsl安装</a></p><p><a href="https://www.cnblogs.com/zhang-jun-jie/p/9266858.html">shell 脚本编程</a></p><h2 id="文件复制拷贝删除"><a href="#文件复制拷贝删除" class="headerlink" title="文件复制拷贝删除"></a>文件复制拷贝删除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp -i a.c /path/a.c # copy file</span><br><span class="line">rm -rf a.py　   # 删除文件</span><br><span class="line">rm -rf data     # 删除文件夹 </span><br><span class="line">touch a.py/vim a.py      # 创建文件</span><br><span class="line">mkdir data      # 创建文件夹</span><br><span class="line">scp /home/lmc/a.py(local) username@ip:/home/lmc/fuwuqi/(remote)  # copy单个文件到远程</span><br><span class="line">scp -r /home/lmc/test/ xxx@192.168.x.xxx:/home/lmc/fuwuqi/   # copy文件夹到远程</span><br></pre></td></tr></table></figure><h2 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h2><p><a href="https://blog.csdn.net/faihung/article/details/84101603">查找软件安装位置</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name nginx</span><br><span class="line">find . -name &quot;*libc*&quot;</span><br></pre></td></tr></table></figure><p>用于查找文件里符合条件的字符串 <code>grep</code><br><a href="https://blog.51cto.com/nameyjj/557424">查看版本信息</a> <code>lsb_release -a</code><br><a href="https://www.linuxprobe.com/five-command-down-browse.html">终端下载文件</a><br>配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line">export PATH=&quot;你的路劲/anaconda3/bin:$PATH&quot;</span><br></pre></td></tr></table></figure><p>查看文件夹下文件内容所在位置： <code>grep -r &quot;api/v2&quot;</code></p><p>查找监听端口</p><p><code>lsof -i |grep LISTEN</code></p><h2 id="wget命令详解"><a href="#wget命令详解" class="headerlink" title="wget命令详解"></a><a href="https://www.cnblogs.com/sx66/p/11887022.html">wget命令详解</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -O 保存文件名</span></span><br><span class="line">wget -O <span class="variable">$fileName</span> <span class="string">&#x27;$url&#x27;</span></span><br></pre></td></tr></table></figure><p>查看系统信息：<code> neofetch</code></p><h2 id="查看文件夹大小"><a href="#查看文件夹大小" class="headerlink" title="查看文件夹大小"></a><a href="https://blog.csdn.net/qq_27003337/article/details/108282745">查看文件夹大小</a></h2><p><a href="https://blog.csdn.net/qq_27003337/article/details/108282745">shell 查看文件夹&#x2F;文件大小、目录&#x2F;文件数量</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># du -sh $folderpath </span></span><br><span class="line"><span class="built_in">du</span> -sh ./.git</span><br></pre></td></tr></table></figure><h1 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h1><p><a href="https://blog.csdn.net/qq_43126480/article/details/102957219">windows10 WSL初体验（含vim、makefile）_qq_43126480的博客-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install neofetch</span><br><span class="line">sudo apt install zsh</span><br><span class="line">sudo apt-get install openssh-server  ip</span><br><span class="line">sudo apt-get install g++</span><br></pre></td></tr></table></figure><p>[sshserver](<a href="https://cloud.tencent.com/developer/article/1751149#:~:text=Ubuntu%E7%BC%BA%E7%9C%81%E6%B2%A1%E6%9C%89%E5%AE%89%E8%A3%85SSH">https://cloud.tencent.com/developer/article/1751149#:~:text=Ubuntu缺省没有安装SSH</a> Server，使用以下命令安装： sudo apt-get,install openssh-server 然后确认sshserver是否启动了：（或用“netstat -tlp”命令）)</p><p>更换git源</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo cp <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list /</span>etc<span class="regexp">/apt/</span>sources.list<span class="number">.20211128</span></span><br><span class="line">sudo vim <span class="regexp">/etc/</span>apt/sources.list</span><br><span class="line">:set nu</span><br><span class="line">gg</span><br><span class="line">dG</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/sigmarising/article/details/84778296">Ubuntu 更换 apt 源为阿里云_sigmarising的博客-CSDN博客_ubuntu换源阿里云</a></p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p><a href="https://www.cnblogs.com/dhcn/p/11523914.html">ubuntu start</a></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><a href="https://blog.csdn.net/qq_31456593/article/details/79247366">用户管理</a></p><p>修改用户密码 <code>passwd username </code></p><h1 id="pycharm-path"><a href="#pycharm-path" class="headerlink" title="pycharm path"></a>pycharm path</h1><blockquote><p>“cwd”: “${fileDirname}”, </p></blockquote><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><p><a href="https://www.jianshu.com/p/302dc10217c0">远程调试</a></p><h1 id="服务器桌面"><a href="#服务器桌面" class="headerlink" title="服务器桌面"></a>服务器桌面</h1><p><a href="https://blog.csdn.net/qq_24253277/article/details/103943848">Win10子系统-Ubuntu安装及配置VNC访问XFCE4桌面</a></p><p><a href="https://www.linuxidc.com/linux/2018-01/150471.htm">给Ubuntu服务器版安装GNOME桌面</a></p><p> <a href="https://blog.csdn.net/m0_37622530/article/details/102632151">在服务器上安装图形化桌面</a></p><h2 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h2><p><a href="https://www.cnblogs.com/wangyuehan/p/9807628.html">配置</a></p><p> <a href="https://blog.csdn.net/techsupporter/article/details/52887199">常用命令</a></p><p> <a href="https://jingyan.baidu.com/article/cbcede077f59bf02f40b4ddb.html">白屏</a></p><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><h2 id="深度学习相关"><a href="#深度学习相关" class="headerlink" title="深度学习相关"></a>深度学习相关</h2><p>Linux 查看显卡信息</p><p> <code>lspci | grep -i vga</code></p><p> <code>lspci | grep -i nvidia</code></p><p> 查看 GPU 使用情况</p><p> 静态查看 <code>nvidia-smi</code></p><p> 周期性查看 <code>watch -n 10 nvidia-smi </code>命令行参数-n 后边跟的是执行命令的周期，以 s 为单位</p><p><a href="https://www.jianshu.com/p/deb91cc253ea">在Linux服务器上跑机器学习代码相关操作</a></p><h2 id="后台运行程序"><a href="#后台运行程序" class="headerlink" title="后台运行程序"></a>后台运行程序</h2><p><a href="https://blog.csdn.net/weixin_43269020/article/details/83819687">后台跑代码</a></p><p>python test.py &gt; test.log 2&gt;&amp;1 &amp;</p><p>nohup python src.py &gt;src.log 2&gt;&amp;1 &amp;</p><p><strong>实现屏幕输出记录到日志文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup yourcommand 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p># 0 – stdin (standard input)，1 – stdout (standard output)，2 – stderr (standard error) ；</p><p># 2&gt;&amp;1是将标准错误（2）重定向到标准输出（&amp;1），标准输出（&amp;1）再被重定向输入到<a href="https://so.csdn.net/so/search?q=%E6%97%A5%E5%BF%97&spm=1001.2101.3001.7020">日志</a>文件中。</p><p>如果希望将日志输出到别的文件中，可以增加一个文件路径参数。如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup yourcommand &gt; myout.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>其中myout.log是保存输出的文件名称；</p><p><a href="https://blog.csdn.net/cxu123321/article/details/108727075">参考</a></p><p><strong>实时监测日志输出内容命令：tail</strong></p><h2 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h2><h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h3><p><a href="https://www.jb51.net/os/Ubuntu/421276.html">截图</a></p><p> <a href="https://blog.csdn.net/qq183837971/article/details/78235144">修改苹果字体</a></p><p> <a href="https://www.linuxmi.com/ubuntu-20-04-mac-os-catalina.html">安装苹果主题</a></p><p> <a href="https://zhuanlan.zhihu.com/p/35362159">系统美化1</a></p><p> <a href="https://zhuanlan.zhihu.com/p/68921091">系统美化2</a></p><p> <a href="https://www.cnblogs.com/spqin/p/13061508.html">ubuntu 安装 火狐浏览器（中国版本）</a></p><p> <a href="https://blog.csdn.net/qq_33733970/article/details/84326110?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">&#x2F;mnt&#x2F;hgfs&#x2F;下不显示共享文件夹的处理办法</a></p><p><a href="https://blog.csdn.net/u012442845/article/details/78855573">Ubuntu 16.04 禁用 nouveau 安装 nvidia显卡驱动</a></p><blockquote><p>要先安装 gcc，make 包</p></blockquote><blockquote><p><a href="https://www.cnblogs.com/xuyaowen/p/linux-secure-boot-disable.html">reference1</a></p></blockquote><blockquote><p> （ <a href="https://blog.csdn.net/wangyjfrecky/article/details/84029668?utm_medium=distribute.pc_relevant.none-task-blog-title-4&amp;spm=1001.2101.3001.4242%EF%BC%89">https://blog.csdn.net/wangyjfrecky/article/details/84029668?utm_medium=distribute.pc_relevant.none-task-blog-title-4&amp;spm=1001.2101.3001.4242）</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/tsq292978891/article/details/84503718">挂载磁盘</a> </p></blockquote><h3 id="idea-安装"><a href="#idea-安装" class="headerlink" title="idea 安装"></a>idea 安装</h3><p><a href="https://www.cnblogs.com/doggod/p/11892899.html">idea安装</a></p><p> <a href="https://blog.csdn.net/weixx3/article/details/81136822">Ubuntu18.04 安装 Idea 2018.2 Ultimate</a></p><p> <a href="https://blog.csdn.net/weixin_31484477/article/details/81133590">ubuntu中PyCharm的安装与卸载</a></p><h3 id="deepwine"><a href="#deepwine" class="headerlink" title="deepwine"></a>deepwine</h3><p><a href="https://www.cnblogs.com/mrwuzs/p/13200462.html">ubuntu20.04安装微信</a></p><p> <a href="https://www.deep-os.com/?id=18">Deepin-wine的相关操作</a></p><p> <a href="https://blog.csdn.net/w851685279/article/details/105892373/">调整微信分辨率</a></p><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p><a href="https://www.cnblogs.com/powerwu/articles/12028350.html">install</a></p><p> <a href="https://www.cnblogs.com/kxm87/p/9686097.html">Maven</a></p><h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><p><a href="https://blog.csdn.net/qq_18625805/article/details/104779056">重置管理员密码</a></p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装Homebrew</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Mac/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Mac/</url>
      
        <content type="html"><![CDATA[<h1 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">已废弃</span></span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://cdn.jsdelivr.net/gh/ineo6/homebrew-install/install)&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建议</span></span><br><span class="line">/bin/bash -c &quot;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&quot;</span><br><span class="line"></span><br><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://cloud.tencent.com/developer/article/1853162">如何安装homebrew</a></p><p><a href="https://blog.csdn.net/sinat_38184748/article/details/114115441">配置环境变量</a></p><p><a href="https://blog.csdn.net/NBDwo/article/details/121322116">M1芯片的MacOS 上安装wget的具体过程-图文教程</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华镜像安装</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装nginx</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Nigix/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Nigix/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/zhaoyingjie/p/6840616.html">install and uninstall</a></p><p><a href="https://blog.csdn.net/weixin_34087307/article/details/93865755">手动安装</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/SSH/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/SSH/</url>
      
        <content type="html"><![CDATA[<h2 id="自动生成key"><a href="#自动生成key" class="headerlink" title="自动生成key"></a>自动生成key</h2><ul><li>linux&#x2F;mac： <code>ssh-keygen -t rsa</code>            <code>ssh-keygen -t rsa -b 4096 </code></li><li>windows：<code>ssh-keygen.exe -t rsa</code></li></ul><h2 id="拷贝key到主机"><a href="#拷贝key到主机" class="headerlink" title="拷贝key到主机"></a>拷贝key到主机</h2><p>linux:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i  &quot;key_path&quot;  &quot;user_name&quot;``@ip_address</span><br><span class="line">ssh-copy-id -i .ssh/id_rsa.pub zhangfan@172.18.32.92</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><p><a href="https://blog.csdn.net/qq_38476684/article/details/100028507">vscode remote ssh 多重跳接配置内网穿透</a></p></li><li><p><a href="https://blog.csdn.net/dcz1994/article/details/103120254?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">vscode通过跳板机(堡垒机)连接remote服务器</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zsh git readme</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/git-zsh-readme/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/git-zsh-readme/</url>
      
        <content type="html"><![CDATA[<h1 id="git-plugin"><a href="#git-plugin" class="headerlink" title="git plugin"></a>git plugin</h1><p>The git plugin provides many <a href="#aliases">aliases</a> and a few useful <a href="#functions">functions</a>.</p><p>To use it, add <code>git</code> to the plugins array in your zshrc file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(... git)</span><br></pre></td></tr></table></figure><h2 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h2><table><thead><tr><th align="left">Alias</th><th align="left">Command</th></tr></thead><tbody><tr><td align="left">g</td><td align="left">git</td></tr><tr><td align="left">ga</td><td align="left">git add</td></tr><tr><td align="left">gaa</td><td align="left">git add –all</td></tr><tr><td align="left">gapa</td><td align="left">git add –patch</td></tr><tr><td align="left">gau</td><td align="left">git add –update</td></tr><tr><td align="left">gav</td><td align="left">git add –verbose</td></tr><tr><td align="left">gap</td><td align="left">git apply</td></tr><tr><td align="left">gapt</td><td align="left">git apply –3way</td></tr><tr><td align="left">gb</td><td align="left">git branch</td></tr><tr><td align="left">gba</td><td align="left">git branch -a</td></tr><tr><td align="left">gbd</td><td align="left">git branch -d</td></tr><tr><td align="left">gbda</td><td align="left">git branch –no-color –merged | grep -vE “^([+<em>]|\s</em>($(git_main_branch)|$(git_develop_branch))\s*$)” | xargs git branch -d 2&gt;&#x2F;dev&#x2F;null</td></tr><tr><td align="left">gbD</td><td align="left">git branch -D</td></tr><tr><td align="left">gbl</td><td align="left">git blame -b -w</td></tr><tr><td align="left">gbnm</td><td align="left">git branch –no-merged</td></tr><tr><td align="left">gbr</td><td align="left">git branch –remote</td></tr><tr><td align="left">gbs</td><td align="left">git bisect</td></tr><tr><td align="left">gbsb</td><td align="left">git bisect bad</td></tr><tr><td align="left">gbsg</td><td align="left">git bisect good</td></tr><tr><td align="left">gbsr</td><td align="left">git bisect reset</td></tr><tr><td align="left">gbss</td><td align="left">git bisect start</td></tr><tr><td align="left">gc</td><td align="left">git commit -v</td></tr><tr><td align="left">gc!</td><td align="left">git commit -v –amend</td></tr><tr><td align="left">gcn!</td><td align="left">git commit -v –no-edit –amend</td></tr><tr><td align="left">gca</td><td align="left">git commit -v -a</td></tr><tr><td align="left">gca!</td><td align="left">git commit -v -a –amend</td></tr><tr><td align="left">gcan!</td><td align="left">git commit -v -a –no-edit –amend</td></tr><tr><td align="left">gcans!</td><td align="left">git commit -v -a -s –no-edit –amend</td></tr><tr><td align="left">gcam</td><td align="left">git commit -a -m</td></tr><tr><td align="left">gcas</td><td align="left">git commit -a -s</td></tr><tr><td align="left">gcasm</td><td align="left">git commit -a -s -m</td></tr><tr><td align="left">gcsm</td><td align="left">git commit -s -m</td></tr><tr><td align="left">gcb</td><td align="left">git checkout -b</td></tr><tr><td align="left">gcf</td><td align="left">git config –list</td></tr><tr><td align="left">gcl</td><td align="left">git clone –recurse-submodules</td></tr><tr><td align="left">gccd</td><td align="left">git clone –recurse-submodules “$@” &amp;&amp; cd “$(basename $_ .git)”</td></tr><tr><td align="left">gclean</td><td align="left">git clean -id</td></tr><tr><td align="left">gpristine</td><td align="left">git reset –hard &amp;&amp; git clean -dffx</td></tr><tr><td align="left">gcm</td><td align="left">git checkout $(git_main_branch)</td></tr><tr><td align="left">gcd</td><td align="left">git checkout $(git_develop_branch)</td></tr><tr><td align="left">gcmsg</td><td align="left">git commit -m</td></tr><tr><td align="left">gco</td><td align="left">git checkout</td></tr><tr><td align="left">gcor</td><td align="left">git checkout –recurse-submodules</td></tr><tr><td align="left">gcount</td><td align="left">git shortlog -sn</td></tr><tr><td align="left">gcp</td><td align="left">git cherry-pick</td></tr><tr><td align="left">gcpa</td><td align="left">git cherry-pick –abort</td></tr><tr><td align="left">gcpc</td><td align="left">git cherry-pick –continue</td></tr><tr><td align="left">gcs</td><td align="left">git commit -S</td></tr><tr><td align="left">gd</td><td align="left">git diff</td></tr><tr><td align="left">gdca</td><td align="left">git diff –cached</td></tr><tr><td align="left">gdcw</td><td align="left">git diff –cached –word-diff</td></tr><tr><td align="left">gdct</td><td align="left">git describe –tags $(git rev-list –tags –max-count&#x3D;1)</td></tr><tr><td align="left">gds</td><td align="left">git diff –staged</td></tr><tr><td align="left">gdt</td><td align="left">git diff-tree –no-commit-id –name-only -r</td></tr><tr><td align="left">gdnolock</td><td align="left">git diff $@ “:(exclude)package-lock.json” “:(exclude)&amp;ast;.lock”</td></tr><tr><td align="left">gdup</td><td align="left">git diff @{upstream}</td></tr><tr><td align="left">gdv</td><td align="left">git diff -w $@ | view -</td></tr><tr><td align="left">gdw</td><td align="left">git diff –word-diff</td></tr><tr><td align="left">gf</td><td align="left">git fetch</td></tr><tr><td align="left">gfa</td><td align="left">git fetch –all –prune</td></tr><tr><td align="left">gfg</td><td align="left">git ls-files | grep</td></tr><tr><td align="left">gfo</td><td align="left">git fetch origin</td></tr><tr><td align="left">gg</td><td align="left">git gui citool</td></tr><tr><td align="left">gga</td><td align="left">git gui citool –amend</td></tr><tr><td align="left">ggf</td><td align="left">git push –force origin $(current_branch)</td></tr><tr><td align="left">ggfl</td><td align="left">git push –force-with-lease origin $(current_branch)</td></tr><tr><td align="left">ggl</td><td align="left">git pull origin $(current_branch)</td></tr><tr><td align="left">ggp</td><td align="left">git push origin $(current_branch)</td></tr><tr><td align="left">ggpnp</td><td align="left">ggl &amp;&amp; ggp</td></tr><tr><td align="left">ggpull</td><td align="left">git pull origin “$(git_current_branch)”</td></tr><tr><td align="left">ggpur</td><td align="left">ggu</td></tr><tr><td align="left">ggpush</td><td align="left">git push origin “$(git_current_branch)”</td></tr><tr><td align="left">ggsup</td><td align="left">git branch –set-upstream-to&#x3D;origin&#x2F;$(git_current_branch)</td></tr><tr><td align="left">ggu</td><td align="left">git pull –rebase origin $(current_branch)</td></tr><tr><td align="left">gpsup</td><td align="left">git push –set-upstream origin $(git_current_branch)</td></tr><tr><td align="left">ghh</td><td align="left">git help</td></tr><tr><td align="left">gignore</td><td align="left">git update-index –assume-unchanged</td></tr><tr><td align="left">gignored</td><td align="left">git ls-files -v | grep “^[[:lower:]]”</td></tr><tr><td align="left">git-svn-dcommit-push</td><td align="left">git svn dcommit &amp;&amp; git push github $(git_main_branch):svntrunk</td></tr><tr><td align="left">gk</td><td align="left">gitk –all –branches &amp;!</td></tr><tr><td align="left">gke</td><td align="left">gitk –all $(git log -g –pretty&#x3D;%h) &amp;!</td></tr><tr><td align="left">gl</td><td align="left">git pull</td></tr><tr><td align="left">glg</td><td align="left">git log –stat</td></tr><tr><td align="left">glgp</td><td align="left">git log –stat -p</td></tr><tr><td align="left">glgg</td><td align="left">git log –graph</td></tr><tr><td align="left">glgga</td><td align="left">git log –graph –decorate –all</td></tr><tr><td align="left">glgm</td><td align="left">git log –graph –max-count&#x3D;10</td></tr><tr><td align="left">glo</td><td align="left">git log –oneline –decorate</td></tr><tr><td align="left">glol</td><td align="left">git log –graph –pretty&#x3D;’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset’</td></tr><tr><td align="left">glols</td><td align="left">git log –graph –pretty&#x3D;’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset’ –stat</td></tr><tr><td align="left">glod</td><td align="left">git log –graph –pretty&#x3D;’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset’</td></tr><tr><td align="left">glods</td><td align="left">git log –graph –pretty&#x3D;’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)&lt;%an&gt;%Creset’ –date&#x3D;short</td></tr><tr><td align="left">glola</td><td align="left">git log –graph –pretty&#x3D;’%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)&lt;%an&gt;%Creset’ –all</td></tr><tr><td align="left">glog</td><td align="left">git log –oneline –decorate –graph</td></tr><tr><td align="left">gloga</td><td align="left">git log –oneline –decorate –graph –all</td></tr><tr><td align="left">glp</td><td align="left">git log –pretty&#x3D;&lt;format&gt;</td></tr><tr><td align="left">gm</td><td align="left">git merge</td></tr><tr><td align="left">gmom</td><td align="left">git merge origin&#x2F;$(git_main_branch)</td></tr><tr><td align="left">gmtl</td><td align="left">git mergetool –no-prompt</td></tr><tr><td align="left">gmtlvim</td><td align="left">git mergetool –no-prompt –tool&#x3D;vimdiff</td></tr><tr><td align="left">gmum</td><td align="left">git merge upstream&#x2F;$(git_main_branch)</td></tr><tr><td align="left">gma</td><td align="left">git merge –abort</td></tr><tr><td align="left">gp</td><td align="left">git push</td></tr><tr><td align="left">gpd</td><td align="left">git push –dry-run</td></tr><tr><td align="left">gpf</td><td align="left">git push –force-with-lease</td></tr><tr><td align="left">gpf!</td><td align="left">git push –force</td></tr><tr><td align="left">gpoat</td><td align="left">git push origin –all &amp;&amp; git push origin –tags</td></tr><tr><td align="left">gpr</td><td align="left">git pull –rebase</td></tr><tr><td align="left">gpu</td><td align="left">git push upstream</td></tr><tr><td align="left">gpv</td><td align="left">git push -v</td></tr><tr><td align="left">gr</td><td align="left">git remote</td></tr><tr><td align="left">gra</td><td align="left">git remote add</td></tr><tr><td align="left">grb</td><td align="left">git rebase</td></tr><tr><td align="left">grba</td><td align="left">git rebase –abort</td></tr><tr><td align="left">grbc</td><td align="left">git rebase –continue</td></tr><tr><td align="left">grbd</td><td align="left">git rebase $(git_develop_branch)</td></tr><tr><td align="left">grbi</td><td align="left">git rebase -i</td></tr><tr><td align="left">grbm</td><td align="left">git rebase $(git_main_branch)</td></tr><tr><td align="left">grbom</td><td align="left">git rebase origin&#x2F;$(git_main_branch)</td></tr><tr><td align="left">grbo</td><td align="left">git rebase –onto</td></tr><tr><td align="left">grbs</td><td align="left">git rebase –skip</td></tr><tr><td align="left">grev</td><td align="left">git revert</td></tr><tr><td align="left">grh</td><td align="left">git reset</td></tr><tr><td align="left">grhh</td><td align="left">git reset –hard</td></tr><tr><td align="left">groh</td><td align="left">git reset origin&#x2F;$(git_current_branch) –hard</td></tr><tr><td align="left">grm</td><td align="left">git rm</td></tr><tr><td align="left">grmc</td><td align="left">git rm –cached</td></tr><tr><td align="left">grmv</td><td align="left">git remote rename</td></tr><tr><td align="left">grrm</td><td align="left">git remote remove</td></tr><tr><td align="left">grs</td><td align="left">git restore</td></tr><tr><td align="left">grset</td><td align="left">git remote set-url</td></tr><tr><td align="left">grss</td><td align="left">git restore –source</td></tr><tr><td align="left">grst</td><td align="left">git restore –staged</td></tr><tr><td align="left">grt</td><td align="left">cd “$(git rev-parse –show-toplevel || echo .)”</td></tr><tr><td align="left">gru</td><td align="left">git reset –</td></tr><tr><td align="left">grup</td><td align="left">git remote update</td></tr><tr><td align="left">grv</td><td align="left">git remote -v</td></tr><tr><td align="left">gsb</td><td align="left">git status -sb</td></tr><tr><td align="left">gsd</td><td align="left">git svn dcommit</td></tr><tr><td align="left">gsh</td><td align="left">git show</td></tr><tr><td align="left">gsi</td><td align="left">git submodule init</td></tr><tr><td align="left">gsps</td><td align="left">git show –pretty&#x3D;short –show-signature</td></tr><tr><td align="left">gsr</td><td align="left">git svn rebase</td></tr><tr><td align="left">gss</td><td align="left">git status -s</td></tr><tr><td align="left">gst</td><td align="left">git status</td></tr><tr><td align="left">gsta</td><td align="left">git stash push</td></tr><tr><td align="left">gsta</td><td align="left">git stash save</td></tr><tr><td align="left">gstaa</td><td align="left">git stash apply</td></tr><tr><td align="left">gstc</td><td align="left">git stash clear</td></tr><tr><td align="left">gstd</td><td align="left">git stash drop</td></tr><tr><td align="left">gstl</td><td align="left">git stash list</td></tr><tr><td align="left">gstp</td><td align="left">git stash pop</td></tr><tr><td align="left">gsts</td><td align="left">git stash show –text</td></tr><tr><td align="left">gstu</td><td align="left">git stash –include-untracked</td></tr><tr><td align="left">gstall</td><td align="left">git stash –all</td></tr><tr><td align="left">gsu</td><td align="left">git submodule update</td></tr><tr><td align="left">gsw</td><td align="left">git switch</td></tr><tr><td align="left">gswc</td><td align="left">git switch -c</td></tr><tr><td align="left">gswm</td><td align="left">git switch $(git_main_branch)</td></tr><tr><td align="left">gswd</td><td align="left">git switch $(git_develop_branch)</td></tr><tr><td align="left">gts</td><td align="left">git tag -s</td></tr><tr><td align="left">gtv</td><td align="left">git tag | sort -V</td></tr><tr><td align="left">gtl</td><td align="left">gtl(){ git tag –sort&#x3D;-v:refname -n -l ${1}* }; noglob gtl</td></tr><tr><td align="left">gunignore</td><td align="left">git update-index –no-assume-unchanged</td></tr><tr><td align="left">gunwip</td><td align="left">git log -n 1 | grep -q -c “--wip--“ &amp;&amp; git reset HEAD~1</td></tr><tr><td align="left">gup</td><td align="left">git pull –rebase</td></tr><tr><td align="left">gupv</td><td align="left">git pull –rebase -v</td></tr><tr><td align="left">gupa</td><td align="left">git pull –rebase –autostash</td></tr><tr><td align="left">gupav</td><td align="left">git pull –rebase –autostash -v</td></tr><tr><td align="left">glum</td><td align="left">git pull upstream $(git_main_branch)</td></tr><tr><td align="left">gwch</td><td align="left">git whatchanged -p –abbrev-commit –pretty&#x3D;medium</td></tr><tr><td align="left">gwip</td><td align="left">git add -A; git rm $(git ls-files –deleted) 2&gt; &#x2F;dev&#x2F;null; git commit –no-verify –no-gpg-sign -m “–wip– [skip ci]”</td></tr><tr><td align="left">gam</td><td align="left">git am</td></tr><tr><td align="left">gamc</td><td align="left">git am –continue</td></tr><tr><td align="left">gams</td><td align="left">git am –skip</td></tr><tr><td align="left">gama</td><td align="left">git am –abort</td></tr><tr><td align="left">gamscp</td><td align="left">git am –show-current-patch</td></tr></tbody></table><h3 id="Main-branch-preference"><a href="#Main-branch-preference" class="headerlink" title="Main branch preference"></a>Main branch preference</h3><p>Following the recent push for removing racially-charged words from our technical vocabulary, the git plugin favors using<br>a branch name other than <code>master</code>. In this case, we favor the shorter, neutral and descriptive term <code>main</code>. This means<br>that any aliases and functions that previously used <code>master</code>, will use <code>main</code> if that branch exists. We do this via the<br>function <code>git_main_branch</code>.</p><h3 id="Deprecated-aliases"><a href="#Deprecated-aliases" class="headerlink" title="Deprecated aliases"></a>Deprecated aliases</h3><p>These are aliases that have been removed, renamed, or otherwise modified in a way that may, or may not, receive further support.</p><table><thead><tr><th align="left">Alias</th><th align="left">Command</th><th align="left">Modification</th></tr></thead><tbody><tr><td align="left">gap</td><td align="left"><code>git add --patch</code></td><td align="left">new alias <code>gapa</code></td></tr><tr><td align="left">gcl</td><td align="left"><code>git config --list</code></td><td align="left">new alias <code>gcf</code></td></tr><tr><td align="left">gdc</td><td align="left"><code>git diff --cached</code></td><td align="left">new alias <code>gdca</code></td></tr><tr><td align="left">gdt</td><td align="left"><code>git difftool</code></td><td align="left">no replacement</td></tr><tr><td align="left">ggpull</td><td align="left"><code>git pull origin $(current_branch)</code></td><td align="left">new alias <code>ggl</code> (<code>ggpull</code> still exists for now though)</td></tr><tr><td align="left">ggpur</td><td align="left"><code>git pull --rebase origin $(current_branch)</code></td><td align="left">new alias <code>ggu</code> (<code>ggpur</code> still exists for now though)</td></tr><tr><td align="left">ggpush</td><td align="left"><code>git push origin $(current_branch)</code></td><td align="left">new alias <code>ggp</code> (<code>ggpush</code> still exists for now though)</td></tr><tr><td align="left">gk</td><td align="left"><code>gitk --all --branches</code></td><td align="left">now aliased to <code>gitk --all --branches</code></td></tr><tr><td align="left">glg</td><td align="left"><code>git log --stat --max-count = 10</code></td><td align="left">now aliased to <code>git log --stat --color</code></td></tr><tr><td align="left">glgg</td><td align="left"><code>git log --graph --max-count = 10</code></td><td align="left">now aliased to <code>git log --graph --color</code></td></tr><tr><td align="left">gwc</td><td align="left"><code>git whatchanged -p --abbrev-commit --pretty = medium</code></td><td align="left">new alias <code>gwch</code></td></tr></tbody></table><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="Current"><a href="#Current" class="headerlink" title="Current"></a>Current</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>grename &lt;old&gt; &lt;new&gt;</code></td><td align="left">Rename <code>old</code> branch to <code>new</code>, including in origin remote</td></tr><tr><td align="left">current_branch</td><td align="left">Return the name of the current branch</td></tr><tr><td align="left">git_current_user_name</td><td align="left">Returns the <code>user.name</code> config value</td></tr><tr><td align="left">git_current_user_email</td><td align="left">Returns the <code>user.email</code> config value</td></tr><tr><td align="left">git_main_branch</td><td align="left">Returns the name of the main branch: <code>main</code> if it exists, <code>master</code> otherwise</td></tr><tr><td align="left">git_develop_branch</td><td align="left">Returns the name of the develop branch: <code>dev</code>, <code>devel</code>, <code>development</code> if they exist, <code>develop</code> otherwise</td></tr></tbody></table><h3 id="Work-in-Progress-WIP"><a href="#Work-in-Progress-WIP" class="headerlink" title="Work in Progress (WIP)"></a>Work in Progress (WIP)</h3><p>These features allow to pause a branch development and switch to another one (<em>“Work in Progress”</em>,  or wip). When you want to go back to work, just unwip it.</p><table><thead><tr><th align="left">Command</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">work_in_progress</td><td align="left">Echoes a warning if the current branch is a wip</td></tr><tr><td align="left">gwip</td><td align="left">Commit wip branch</td></tr><tr><td align="left">gunwip</td><td align="left">Uncommit wip branch</td></tr></tbody></table><h3 id="Deprecated-functions"><a href="#Deprecated-functions" class="headerlink" title="Deprecated functions"></a>Deprecated functions</h3><table><thead><tr><th align="left">Command</th><th align="left">Description</th><th align="left">Reason</th></tr></thead><tbody><tr><td align="left">current_repository</td><td align="left">Return the names of the current remotes</td><td align="left">Didn’t work properly. Use <code>git remote -v</code> instead (<code>grv</code> alias)</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>终端工具配置</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/TerminalConfiguration/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/TerminalConfiguration/</url>
      
        <content type="html"><![CDATA[<h1 id="终端工具配置"><a href="#终端工具配置" class="headerlink" title="终端工具配置"></a>终端工具配置</h1><h1 id="zsh安装"><a href="#zsh安装" class="headerlink" title="zsh安装"></a>zsh安装</h1><p>如果你用 Mac，就可以直接看下一节</p><p>如果你用 Redhat Linux，执行：<code>sudo yum install zsh</code></p><p>如果你用 Ubuntu Linux，执行：<code>sudo apt-get install zsh</code></p><p>如果你用 Windows……去洗洗睡吧。</p><p>安装完成后设置当前用户使用 zsh：<code>chsh -s /bin/zsh</code>，根据提示输入当前用户的密码就可以了。</p><h1 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h1><p>oh-my-zsh可能会影响速度，所以，可以不安装，如果不安装，插件的安装，建议使用”一步安装“</p><p>安装「oh my zsh」可以自动安装也可以手动安装。</p><p>自动安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>手动安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line"><span class="built_in">cp</span> ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure><p>都不复杂，安装完成之后退出当前会话重新打开一个终端窗口，你就可以见到这个彩色的提示了：</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011530511.png"></p><p><strong>默认推荐配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export ZSH=&quot;$HOME/.oh-my-zsh&quot;</span><br><span class="line">ZSH_THEME=&quot;robbyrussell&quot;</span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line">plugins=(git history vscode sublime sudo)</span><br></pre></td></tr></table></figure><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><h2 id="Powerlevel10k"><a href="#Powerlevel10k" class="headerlink" title="Powerlevel10k"></a>Powerlevel10k</h2><p>官网：<a href="https://github.com/romkatv/powerlevel10k">https://github.com/romkatv/powerlevel10k</a></p><p>可以选择pure主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git ~/.zsh/plugins/powerlevel10k</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;source ~/.zsh/plugins/powerlevel10k/powerlevel10k.zsh-theme&#x27;</span> &gt;&gt;~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="p10k-configure"><a href="#p10k-configure" class="headerlink" title="p10k configure"></a>p10k configure</h3><h3 id="安装Hack-Nerd字体"><a href="#安装Hack-Nerd字体" class="headerlink" title="安装Hack Nerd字体"></a><a href="https://www.nerdfonts.com/font-downloads">安装Hack Nerd字体</a></h3><h3 id="VSCode字体设置"><a href="#VSCode字体设置" class="headerlink" title="VSCode字体设置"></a>VSCode字体设置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Hack</span> Nerd Font Mono, Monaco, <span class="string">&#x27;Courier New&#x27;</span>, monospace</span><br></pre></td></tr></table></figure><h2 id="Pure"><a href="#Pure" class="headerlink" title="Pure"></a>Pure</h2><p>官网：<a href="https://github.com/sindresorhus/pure">https://github.com/sindresorhus/pure</a></p><p>建议通过使用Powerlevel10k安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install pure</span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/URmyLucky/pure2020.git ~/.zsh/plugins/pure</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;(q-)PWD&#125;</span>/.zsh/plugins/pure/pure.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>.zshrc文件中添加</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">autoload -U promptinit; promptinit</span><br><span class="line">prompt pure</span><br></pre></td></tr></table></figure><h1 id="必备插件安装"><a href="#必备插件安装" class="headerlink" title="必备插件安装"></a>必备插件安装</h1><h2 id="安装自动补全功能"><a href="#安装自动补全功能" class="headerlink" title="安装自动补全功能"></a>安装自动补全功能</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用 <code>zsh</code> 我认为第一个吸引我的重要插件就是 <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a>。它会自动为你的终端命令提供补全建议，让你能更加快速的完成命令输入，有了它，你再也不用一遍遍的按 <code>tab</code> 来加快你的命令输入了。</p><p><code>zsh-autosuggestions</code> 安装文档你可以点击这个<a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md">链接</a> 进入查看，比如使用 Git 安装步骤如下：</p><p>使用 Git 把项目从仓库 Clone 下来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure><p>或者手动将以下内容添加到 <code>.zshrc</code> 文件内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh</span><br></pre></td></tr></table></figure><p>生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>重新开启终端会话，你就可以享受 <code>zsh-autosuggestions</code> 给你带来的便利了。</p><h4 id="一步安装："><a href="#一步安装：" class="headerlink" title="一步安装："></a>一步安装：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/plugins/zsh-autosuggestions</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line">//gitee</span><br><span class="line">git <span class="built_in">clone</span> git@gitee.com:lhaisu/zsh-autosuggestions.git ~/.zsh/plugins/zsh-autosuggestions</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="方法二：推荐"><a href="#方法二：推荐" class="headerlink" title="方法二：推荐"></a>方法二：推荐</h3><ol><li>把插件仓库克隆到<code>$ZSH_CUSTOM/plugins</code> (默认位置是 ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;plugins)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="https://dev.azure.com/conansteve/87be1d78-05d4-41bd-87b2-a023d463dcd2/_apis/git/repositories/075c6005-9f0d-4b8c-97a7-60d87486d3f4/items?path=%2F1648455923125_2748.png&versionDescriptor%5BversionOptions%5D=0&versionDescriptor%5BversionType%5D=0&versionDescriptor%5Bversion%5D=master&resolveLfs=true&%24format=octetStream&api-version=5.0" style="zoom:50%;" /><ol><li>设置<code>~/.zshrc</code>，把<code>zsh-autosuggestions</code>添加到 Oh My Zsh 要加载的插件列表中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions)</span><br></pre></td></tr></table></figure><ol><li>使配置生效 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol><h2 id="语法高亮插件"><a href="#语法高亮插件" class="headerlink" title="语法高亮插件"></a>语法高亮插件</h2><p>安装zsh-syntax-highlighting语法高亮插件</p><p>官网：<a href="https://link.jianshu.com/?t=https://github.com/zsh-users/zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a></p><h3 id="一步安装：-1"><a href="#一步安装：-1" class="headerlink" title="一步安装："></a>一步安装：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.zsh/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line">//gitee</span><br><span class="line">git <span class="built_in">clone</span> git@gitee.com:jklash1996/zsh-syntax-highlighting.git ~/.zsh/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h2 id="自动跳转插件autojump"><a href="#自动跳转插件autojump" class="headerlink" title="自动跳转插件autojump"></a>自动跳转插件autojump</h2><p>地址：<a href="https://github.com/wting/autojump">https://github.com/wting/autojump</a></p><p>它的用法是输入 <code>j 目录名</code> 或 <code>j 目录名包含的字符</code>（这个目录必须是之前 cd 访问过的），就可直接切换到相应的目录。不用再各种<code>cd</code>啦～具体看下面截图示例。</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011530512.png"></p><h4 id="方法一：推荐"><a href="#方法一：推荐" class="headerlink" title="方法一：推荐"></a>方法一：推荐</h4><ol><li><h5 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h5></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure><blockquote><p>Add the following line to your ~&#x2F;.bash_profile or ~&#x2F;.zshrc file:<br><code> [ -f /opt/homebrew/etc/profile.d/autojump.sh ] &amp;&amp; . /opt/homebrew/etc/profile.d/autojump.sh</code><br>If you use the Fish shell then add the following line to your ~&#x2F;.config&#x2F;fish&#x2F;config.fish:<br><code> [ -f /opt/homebrew/share/autojump/autojump.fish ]; and source /opt/homebrew/share/autojump/autojump.fish</code><br>Restart your terminal for the settings to take effect.</p></blockquote><ol><li><h5 id="Linux-一步安装"><a href="#Linux-一步安装" class="headerlink" title="Linux 一步安装"></a>Linux 一步安装</h5></li></ol><p>首先下载 autojump 源码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:wting/autojump.git ~/.zsh/plugins/autojump</span><br><span class="line"><span class="built_in">cd</span> ~/.zsh/plugins/autojump</span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source ~/.autojump/etc/profile.d/autojump.sh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>国内源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:gentlecp/autojump.git ~/.zsh/plugins/autojump</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/.zsh/plugins/autojump</span><br><span class="line"></span><br><span class="line">./install.py</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; source ~/.autojump/etc/profile.d/autojump.sh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>安装完成后，使用查看autojump版本。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>autojump --version</span><br><span class="line">autojump release-v21.<span class="number">1.2</span></span><br></pre></td></tr></table></figure><h2 id="colorls"><a href="#colorls" class="headerlink" title="colorls"></a>colorls</h2><p>官网：<a href="https://github.com/athityakumar/colorls">https://github.com/athityakumar/colorls</a></p><h3 id="homebrew安装："><a href="#homebrew安装：" class="headerlink" title="homebrew安装："></a>homebrew安装：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install ruby</span><br><span class="line">sudo gem install colorls</span><br></pre></td></tr></table></figure><h3 id="WSL-apt安装"><a href="#WSL-apt安装" class="headerlink" title="WSL apt安装"></a>WSL apt安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby-dev  //切记用官方源，阿里云源会出问题，会出错，其他源暂时没试过</span><br><span class="line">sudo gem install colorls</span><br></pre></td></tr></table></figure><h3 id="MacOS-13-6源码安装："><a href="#MacOS-13-6源码安装：" class="headerlink" title="MacOS 13.6源码安装："></a>MacOS 13.6源码安装：</h3><p>安装ruby(version&gt;2.5)  <a href="https://www.ruby-lang.org/en/downloads/">https://www.ruby-lang.org/en/downloads/</a></p><p><a href="https://blog.csdn.net/baidu_38432732/article/details/106573806">源码安装ruby</a></p><p><a href="https://blog.csdn.net/baidu_38432732/article/details/106573806">https://blog.csdn.net/baidu_38432732&#x2F;article&#x2F;details&#x2F;106573806</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/ruby-3.0.3</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line">esource ~/.zshrc</span><br><span class="line">ruby -v</span><br><span class="line">gem install colorls</span><br></pre></td></tr></table></figure><p>如果安装colorls失败，需要安装openssl，命令为<code>brew install openssl@1.1</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">./config --prefix=<span class="regexp">/usr/</span>local/opt/openssl/</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br><span class="line">cd  ~<span class="regexp">/Desktop/</span>ruby-<span class="number">2.7</span><span class="number">.5</span>/  </span><br><span class="line"></span><br><span class="line"><span class="comment">//下面功能都是生成makefile</span></span><br><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/opt/ruby-<span class="number">2.7</span><span class="number">.5</span> --<span class="keyword">with</span>-openssl-dir=<span class="regexp">/usr/</span>local/opt/openssl</span><br><span class="line">./configure --prefix=<span class="regexp">/usr/</span>local/opt/ruby-<span class="number">2.7</span><span class="number">.5</span> --<span class="keyword">with</span>-openssl-include=<span class="regexp">/usr/</span>local/opt/openssl/include/ --<span class="keyword">with</span>-openssl-lib=<span class="regexp">/usr/</span>local/opt/openssl/lib</span><br><span class="line"><span class="comment">//测试成功</span></span><br><span class="line">cd ./ext/openssl/</span><br><span class="line">ruby extconf.<span class="property">rb</span> --prefix=<span class="regexp">/usr/</span>local/opt/ruby-<span class="number">2.7</span><span class="number">.5</span> --<span class="keyword">with</span>-openssl-include=<span class="regexp">/usr/</span>local/opt/openssl/include/ --<span class="keyword">with</span>-openssl-lib=<span class="regexp">/usr/</span>local/opt/openssl/lib</span><br><span class="line"><span class="comment">//end</span></span><br><span class="line"> sudo make </span><br><span class="line"> sudo make install</span><br></pre></td></tr></table></figure><p>将下面代码添加进.zshrc文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RUBY_HOME=/usr/local/opt/ruby-2.7.5</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$RUBY_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=“RUBY_HOME/lib”</span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=“RUBY_HOME/include”</span><br></pre></td></tr></table></figure><h3 id="别名配置文件"><a href="#别名配置文件" class="headerlink" title="别名配置文件"></a>别名配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># colorls别名start</span></span><br><span class="line"><span class="comment"># --sd 排序 </span></span><br><span class="line"><span class="comment"># --gs git状态 Shows git status for each entry</span></span><br><span class="line"><span class="comment"># -r(or)  --report 显示报告</span></span><br><span class="line"><span class="comment"># -d (or) --dirs : Shows only directories</span></span><br><span class="line"><span class="comment"># -f (or) --files : Shows only files</span></span><br><span class="line"><span class="comment"># -h (or) --help : Prints a very helpful help menu</span></span><br><span class="line"><span class="comment"># --sd (or) --sort-dirs or --group-directories-first : Shows directories first, followed by files</span></span><br><span class="line"><span class="built_in">alias</span> lla=<span class="string">&#x27;colorls -lA --sd --sf --gs --group-directories-first&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;colorls --sd --gs&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> lsa=<span class="string">&#x27;colorls -A --sd --sf --gs --group-directories-first&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;colorls -l --gs --group-directories-first&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> lst2=<span class="string">&quot;colorls --tree=2&quot;</span></span><br><span class="line"><span class="built_in">alias</span> lst=<span class="string">&quot;colorls --tree=1&quot;</span></span><br><span class="line"><span class="comment"># colorls别名end</span></span><br></pre></td></tr></table></figure><h1 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=(git history vscode sublime sudo)</span><br></pre></td></tr></table></figure><ul><li>vscode</li><li>Sublime</li><li>Sudo</li></ul><h1 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h1><img src="https://dev.azure.com/conansteve/87be1d78-05d4-41bd-87b2-a023d463dcd2/_apis/git/repositories/075c6005-9f0d-4b8c-97a7-60d87486d3f4/items?path=%2F1648455784134_8713.png&versionDescriptor%5BversionOptions%5D=0&versionDescriptor%5BversionType%5D=0&versionDescriptor%5Bversion%5D=master&resolveLfs=true&%24format=octetStream&api-version=5.0" style="zoom:50%;" /><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><ol><li>通过Macwk网站安装</li><li>MacOS可通过homebrew安装 <code>brew install hyper</code></li><li><a href="https://hyper.is/">官网下载</a></li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">copyOnSelect:</span> <span class="literal">true</span>,<span class="regexp">//</span>自动复制被选择区域</span><br><span class="line"><span class="symbol">shell:</span> <span class="string">&#x27;zsh&#x27;</span>,</span><br><span class="line"><span class="symbol">fontFamily:</span> <span class="string">&#x27;Hack Nerd Font Mono, &quot;DejaVu Sans Mono&quot;, Consolas, &quot;Lucida Console&quot;, monospace&#x27;</span>,<span class="regexp">//</span>MacOS  <span class="symbol">https:</span>/<span class="regexp">/www.nerdfonts.com/font</span>-downloads</span><br><span class="line"><span class="string">&quot;editor.fontFamily&quot;</span>: <span class="string">&quot;Hack Nerd Font Mono,Lucida Console, &#x27; Lucida Console&#x27;, Lucida Console，&quot;</span>,  <span class="regexp">//windows</span></span><br></pre></td></tr></table></figure><p>这里我们会用到两个插件：</p><ul><li>hyper-snazzy：提供终端颜色主题</li><li>hyper-transparent-dynamic：提供终端窗口毛玻璃半透明效果</li></ul><p>具体配置代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins<span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;hyper-snazzy&quot;</span><span class="punctuation">,</span> <span class="string">&quot;hyper-transparent-dynamic&quot;</span><span class="punctuation">,</span> <span class="string">&quot;hyperpower&quot;</span><span class="punctuation">,</span><span class="string">&quot;hyper-pane&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="窗口透明度调整"><a href="#窗口透明度调整" class="headerlink" title="窗口透明度调整"></a>窗口透明度调整</h3><p>同样是在 Hyper 的配置文件中，添加如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hyperTransparentDynamic<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    alpha<span class="punctuation">:</span> <span class="number">0.5</span> <span class="comment">// 默认 50% 透明度</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="comment">//节点config的子节点</span></span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hyper i hyper-npm-theme</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011530513.png" alt="image (1642×986) (hyper.is)"></p><h1 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h1><p><a href="https://blog.csdn.net/ClownG/article/details/107849908">Mac终端工具iTerm2的多个ssh链接保存设置（类似Xshell的使用方法）</a></p><h1 id="别名配置"><a href="#别名配置" class="headerlink" title="别名配置"></a>别名配置</h1><h2 id="colorls-1"><a href="#colorls-1" class="headerlink" title="colorls"></a><a href="#colorls">colorls</a></h2><h2 id="Git-alias"><a href="#Git-alias" class="headerlink" title="Git alias"></a>Git alias</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git 别名</span></span><br><span class="line"><span class="built_in">alias</span> gta=<span class="string">&quot;git add .&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtam=<span class="string">&quot;git add .  &amp;&amp; git commit -m&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtb=<span class="string">&quot;git branch&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtck=<span class="string">&quot;git checkout&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtcl=<span class="string">&quot;git clone&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtm=<span class="string">&quot;git commit -m&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtl=<span class="string">&quot;git log --graph --all&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtlo=<span class="string">&quot;git log --oneline --graph --all&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtrh=<span class="string">&quot;git reset --hard HEAD&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtrs=<span class="string">&quot;git reset --soft HEAD&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtps=<span class="string">&quot;git push&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gts=<span class="string">&quot;git status&quot;</span></span><br><span class="line"><span class="built_in">alias</span> gtst=<span class="string">&quot;git stash&quot;</span></span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">普通别名</span></span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br><span class="line">alias la=&#x27;ls -AF &#x27;</span><br><span class="line">alias lsa=&#x27;ls -AF &#x27;</span><br><span class="line">alias ll=&#x27;ls -lF &#x27;</span><br><span class="line">alias lla=&#x27;ls -lAF &#x27;</span><br><span class="line"></span><br><span class="line">alias cm=&quot;clean-mark&quot;</span><br><span class="line">alias src=&quot;source ~/.zshrc&quot;</span><br><span class="line">alias strc=&quot;subl ~/.zshrc&quot;</span><br><span class="line">alias als=&quot;alias&quot;</span><br><span class="line">alias alsg=&quot;alias |grep&quot;</span><br></pre></td></tr></table></figure><h1 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/19556676">终极 Shell——ZSH</a></li><li><a href="https://www.dazhuanlan.com/franco109/topics/1314003">玩转终端软件 Hyper</a></li><li><a href="https://sspai.com/post/56081#!">打造高颜值终端——Hyper</a></li><li><a href="https://www.jianshu.com/p/43c1b6e40c69">zsh 命令自动补全插件 zsh-autosuggestions 安装和配置</a></li><li><a href="https://www.jianshu.com/p/15f0ffaa88d7">Linux 懒人工具 - autojump</a></li><li><a href="https://www.cnblogs.com/himonkey/p/11853487.html">Mac终端窗口配置oh-my-zsh</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>决策树</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h1><p>决策树是一种机器学习的方法。决策树的生成算法有ID3, C4.5和C5.0等。决策树是一种树形结构，其中每个内部节点表示一个属性上的判断，每个分支代表一个判断结果的输出，最后每个叶节点代表一种分类结果。</p><p>决策树是一种十分常用的分类方法，需要监管学习（有教师的Supervised Learning），监管学习就是给出一堆样本，每个样本都有一组属性和一个分类结果，也就是分类结果已知，那么通过学习这些样本得到一个决策树，这个决策树能够对新的数据给出正确的分类。这里通过一个简单的例子来说明决策树的构成思路：</p><p>给出如下的一组数据，一共有十个样本（学生数量），每个样本有分数，出勤率，回答问题次数，作业提交率四个属性，最后判断这些学生是否是好学生。最后一列给出了人工分类结果。</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011543972.png"></p><p>然后用这一组附带分类结果的样本可以训练出多种多样的决策树，这里为了简化过程，我们假设决策树为二叉树，且类似于下图：</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011543697.png"></p><p>通过学习上表的数据，可以设置A，B，C，D，E的具体值，而A，B，C，D，E则称为阈值。当然也可以有和上图完全不同的树形，比如下图这种的：</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011545723.png"></p><p>所以决策树的生成主要分以下两步，这两步通常通过学习已经知道分类结果的样本来实现。</p><ol><li>节点的分裂：一般当一个节点所代表的属性无法给出判断时，则选择将这一节点分成2个子节点（如不是二叉树的情况会分成n个子节点）</li><li>阈值的确定：选择适当的阈值使得分类错误率最小 （Training Error）。</li></ol><p>比较常用的决策树有ID3，C4.5和CART（Classification And Regression Tree），CART的分类效果一般优于其他决策树。下面介绍具体步骤。</p><p>ID3: 由增熵（Entropy）原理来决定那个做父节点，那个节点需要分裂。对于一组数据，熵越小说明分类结果越好。熵定义如下：<br>$$<br>Entropy&#x3D;−\sum [p_{x_i}∗log_2^{p_{x_i}}]<br>$$<br>其中p(x_i) 为x_i出现的概率。假如是2分类问题，当A类和B类各占50%的时候，<br>$$<br>Entropy&#x3D;−(0.5∗log_2^{0.5}+0.5*log_2^{0.5})&#x3D;1<br>$$<br>当只有A类，或只有B类的时候，<br>$$<br>Entropy&#x3D;−（1∗log_2^1+0）&#x3D;0<br>$$<br>所以当Entropy最大为1的时候，是分类效果最差的状态，当它最小为0的时候，是完全分类的状态。因为熵等于零是理想状态，一般实际情况下，熵介于0和1之间。</p><p>熵的不断最小化，实际上就是提高分类正确率的过程。<br>比如上表中的4个属性：单一地通过以下语句分类：</p><ol><li>分数小于70为【不是好学生】：分错1个</li><li>出勤率大于70为【好学生】：分错3个</li><li>问题回答次数大于9为【好学生】：分错2个</li><li>作业提交率大于80%为【好学生】：分错2个</li></ol><p>最后发现 分数小于70为【不是好学生】这条分错最少，也就是熵最小，所以应该选择这条为父节点进行树的生成，当然分数也可以选择大于71，大于72等等，出勤率也可以选择小于60，65等等，总之会有很多类似上述1~4的条件，最后选择分类错最少即熵最小的那个条件。而当分裂父节点时道理也一样，分裂有很多选择，针对每一个选择，与分裂前的分类错误率比较，留下那个提高最大的选择，即熵减最大的选择。</p><p>C4.5：通过对ID3的学习，可以知道ID3存在一个问题，那就是越细小的分割分类错误率越小，所以ID3会越分越细，比如以第一个属性为例：设阈值小于70可将样本分为2组，但是分错了1个。如果设阈值小于70，再加上阈值等于95，那么分错率降到了0，但是这种分割显然只对训练数据有用，对于新的数据没有意义，这就是所说的过度学习（Overfitting）。</p><p>分割太细了，训练数据的分类可以达到0错误率，但是因为新的数据和训练数据不同，所以面对新的数据分错率反倒上升了。决策树是通过分析训练数据，得到数据的统计信息，而不是专为训练数据量身定做。</p><p>就比如给男人做衣服，叫来10个人做参考，做出一件10个人都能穿的衣服，然后叫来另外5个和前面10个人身高差不多的，这件衣服也能穿。但是当你为10个人每人做一件正好合身的衣服，那么这10件衣服除了那个量身定做的人，别人都穿不了。</p><p>所以为了避免分割太细，c4.5对ID3进行了改进，C4.5中，优化项要除以分割太细的代价，这个比值叫做信息增益率，显然分割太细分母增加，信息增益率会降低。除此之外，其他的原理和ID3相同。</p><p>CART：分类回归树<br>CART是一个二叉树，也是回归树，同时也是分类树，CART的构成简单明了。<br>CART只能将一个父节点分为2个子节点。CART用GINI指数来决定如何分裂：<br>GINI指数：总体内包含的类别越杂乱，GINI指数就越大（跟熵的概念很相似）。</p><p>a. 比如出勤率大于70%这个条件将训练数据分成两组：大于70%里面有两类：【好学生】和【不是好学生】，而小于等于70%里也有两类：【好学生】和【不是好学生】。</p><p>b. 如果用分数小于70分来分：则小于70分只有【不是好学生】一类，而大于等于70分有【好学生】和【不是好学生】两类。</p><p>比较a和b，发现b的凌乱程度比a要小，即GINI指数b比a小，所以选择b的方案。以此为例，将所有条件列出来，选择GINI指数最小的方案，这个和熵的概念很类似。</p><p>CART还是一个回归树，回归解析用来决定分布是否终止。理想地说每一个叶节点里都只有一个类别时分类应该停止，但是很多数据并不容易完全划分，或者完全划分需要很多次分裂，必然造成很长的运行时间，所以CART可以对每个叶节点里的数据分析其均值方差，当方差小于一定值可以终止分裂，以换取计算成本的降低。</p><p>CART和ID3一样，存在偏向细小分割，即过度学习（过度拟合的问题），为了解决这一问题，对特别长的树进行剪枝处理，直接剪掉。</p><p>以上的决策树训练的时候，一般会采取Cross-Validation法：比如一共有10组数据：</p><p>第一次. 1到9做训练数据， 10做测试数据<br>第二次. 2到10做训练数据，1做测试数据<br>第三次. 1，3到10做训练数据，2做测试数据，以此类推<br>做10次，然后大平均错误率。这样称为 10 folds Cross-Validation。<br>比如 3 folds Cross-Validation 指的是数据分3份，2份做训练，1份做测试。</p><p>转载自：<a href="https://zhuanlan.zhihu.com/p/30059442">https://zhuanlan.zhihu.com/p/30059442</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>维特比算法</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/ViterbiAlgorithm/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/ViterbiAlgorithm/</url>
      
        <content type="html"><![CDATA[<p>Viterbi:DP搜索最优状态序列<br>定义：Viterbi变量$δ_t(i)$是在时间t时，模型沿着某一条路径到达$S_i$,输出观察序列$Ο&#x3D;O_1O_2···O_t$的最大概率为：<br>$$<br>δ_t(i)&#x3D;\max_{q_1q_2···q_{t-1}} P(q_1q_2···q_t&#x3D;S_i, O_1O_2···O_t|i)<br>$$</p><p><a href="https://blog.csdn.net/StarLib/article/details/106904606">维特比算法实现</a></p><p><a href="https://www.zhihu.com/question/20136144">如何通俗地讲解 viterbi 算法？</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">argmax</span>(<span class="params">vec</span>):</span><br><span class="line">    <span class="comment"># return the argmax as a python int</span></span><br><span class="line">    _, idx = torch.<span class="built_in">max</span>(vec, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> idx.item()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log_sum_exp</span>(<span class="params">vec</span>):</span><br><span class="line">    max_score = vec[<span class="number">0</span>, argmax(vec)]</span><br><span class="line">    max_score_broadcast = max_score.view(<span class="number">1</span>, -<span class="number">1</span>).expand(<span class="number">1</span>, vec.size()[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> max_score + \</span><br><span class="line">           torch.log(torch.<span class="built_in">sum</span>(torch.exp(vec - max_score_broadcast)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Viterbi</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, s_to_idx, v_to_idx, tran_matrix, emit_matrix</span>):</span><br><span class="line">        self.s_to_idx = s_to_idx</span><br><span class="line">        self.v_to_idx = v_to_idx</span><br><span class="line">        self.tran_matrix = torch.Tensor(tran_matrix).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.emit_matrix = torch.Tensor(emit_matrix).transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.state_size = <span class="built_in">len</span>(s_to_idx)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">viterbi</span>(<span class="params">self, init_state, v_seq</span>):</span><br><span class="line">        backpointers = []</span><br><span class="line">        <span class="comment"># 在对数空间初始化维特比变量</span></span><br><span class="line">        res = []</span><br><span class="line">        init_state = torch.Tensor(init_state)</span><br><span class="line">        <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(init_state):</span><br><span class="line">            v = self.v_to_idx[v_seq[<span class="number">0</span>]]</span><br><span class="line">            tmp = torch.log(s) + torch.log(self.emit_matrix[v][i])</span><br><span class="line">            res.append(tmp)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">del</span> init_state</span><br><span class="line">        init_vvars = torch.stack(res)</span><br><span class="line"></span><br><span class="line">        forward_var = init_vvars</span><br><span class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> v_seq[<span class="number">1</span>:]:</span><br><span class="line">            bptrs_t = []</span><br><span class="line">            viterbivars_t = []</span><br><span class="line">            v_index = self.v_to_idx[v]</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">range</span>(self.state_size):</span><br><span class="line">                next_tag_var = forward_var + torch.log(self.tran_matrix[s])</span><br><span class="line">                best_tag_id = argmax(next_tag_var)</span><br><span class="line">                bptrs_t.append(best_tag_id)</span><br><span class="line">                viterbivars_t.append(next_tag_var[best_tag_id])</span><br><span class="line">            forward_var = (torch.Tensor(viterbivars_t) + torch.log(self.emit_matrix[v_index]))</span><br><span class="line">            backpointers.append(bptrs_t)</span><br><span class="line">        <span class="comment"># 终结</span></span><br><span class="line">        terminal_var = forward_var</span><br><span class="line">        best_tag_id = argmax(terminal_var)</span><br><span class="line">        path_score = terminal_var[best_tag_id]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 回溯解码</span></span><br><span class="line">        best_path = [best_tag_id]</span><br><span class="line">        <span class="keyword">for</span> bptrs_t <span class="keyword">in</span> <span class="built_in">reversed</span>(backpointers):</span><br><span class="line">            best_tag_id = bptrs_t[best_tag_id]</span><br><span class="line">            best_path.append(best_tag_id)</span><br><span class="line"></span><br><span class="line">        best_path.reverse()</span><br><span class="line">        <span class="keyword">return</span> torch.exp(path_score), best_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">toIdx</span>(<span class="params">l: <span class="type">List</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;e: i <span class="keyword">for</span> i, e <span class="keyword">in</span> <span class="built_in">enumerate</span>(l)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    states = [<span class="string">&quot;健康&quot;</span>, <span class="string">&quot;发烧&quot;</span>] <span class="comment"># tags</span></span><br><span class="line">    observations = [<span class="string">&quot;正常&quot;</span>, <span class="string">&quot;冷&quot;</span>, <span class="string">&quot;头晕&quot;</span>]<span class="comment"># </span></span><br><span class="line">    tran_matrix = torch.Tensor([[<span class="number">0.7</span>, <span class="number">0.3</span>], [<span class="number">0.4</span>, <span class="number">0.6</span>]])  <span class="comment"># A_ij tagsNum*tagsNum 状态转移矩阵</span></span><br><span class="line">    emit_matrix = torch.Tensor([[<span class="number">0.5</span>, <span class="number">0.4</span>, <span class="number">0.1</span>], [<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.6</span>]]) <span class="comment">#tagsNum* obsStates 观测状态矩阵</span></span><br><span class="line">    init_state = [<span class="number">0.6</span>, <span class="number">0.4</span>]</span><br><span class="line">    observation_seq = [<span class="string">&quot;正常&quot;</span>, <span class="string">&quot;冷&quot;</span>, <span class="string">&quot;头晕&quot;</span>]</span><br><span class="line">    viterbi = Viterbi(toIdx(states), toIdx(observations), tran_matrix, emit_matrix)</span><br><span class="line">    maxpro, path = viterbi.viterbi(init_state, observation_seq)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最大概率为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(maxpro))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;最大概率下路径为：&quot;</span>)</span><br><span class="line">    pt = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> path:</span><br><span class="line">        pt += states[i] + <span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(pt)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习理论</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><a href="https://zhuanlan.zhihu.com/p/262697114">计算机视觉基本任务综述</a></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011542238.png"></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011542239.png"></p><p>N是输入图片长度，K是滤波器长度（卷积核大小），S是步长</p><h2 id="干货集锦"><a href="#干货集锦" class="headerlink" title="干货集锦"></a>干货集锦</h2><p><a href="https://www.cntofu.com/book/85/index.html">机器学习原理</a></p><p><a href="https://datawhalechina.github.io/leeml-notes/#/">李宏毅机器学习笔记</a></p><p><a href="https://www.bilibili.com/video/av59538266">李宏毅Bilibili</a></p><p><a href="https://blog.csdn.net/qq_41485273/article/details/111563979">白板推导</a></p><h2 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h2><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011542240.png"></p><blockquote><p>I(X;Y) &#x3D; I(Y;X) &#x3D; H(Y)-H(Y&#x2F;X) &#x3D; H(X) – H(X&#x2F;Y) </p></blockquote><blockquote><p>H(X) + H(Y) &#x3D; H(X,Y) + I(X;Y)</p></blockquote><blockquote><p>I(X;Y)&#x3D;H(X) + H(Y) – H(X,Y)</p></blockquote><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><p><a href="https://zhuanlan.zhihu.com/p/42706477">详解残差网络</a></p><p><a href="https://zhuanlan.zhihu.com/p/68386882">Singular Value Decomposition（SVD奇异值分解）</a></p><p><a href="https://zhuanlan.zhihu.com/p/22751416">数据挖掘|概率图模型（一）</a></p><p><a href="https://www.zhihu.com/question/19645541">查准率，准确率，查全率</a></p><p><a href="https://zhuanlan.zhihu.com/p/97870600">F1值</a></p><p><a href="https://zhuanlan.zhihu.com/p/66063089">自监督学习</a></p><p> <a href="https://mp.weixin.qq.com/s/b2q3nexPR7Amx5ficdBh-Q">超详细的NLP预训练语言模型总结清单</a></p><p><a href="https://blog.csdn.net/asialee_bird/article/details/81486700">TF-IDF算法介绍及实现</a></p><p><a href="https://www.zhihu.com/question/20446337">马尔可夫毯（Markov Blanket）</a></p><p><a href="https://www.cnblogs.com/wisir/p/12556353.html">端到端学习</a></p><p><a href="https://zhuanlan.zhihu.com/p/41521695">特征工程与表示学习</a></p><p><a href="https://zhuanlan.zhihu.com/p/62629465">图嵌入</a></p><p><a href="https://zhuanlan.zhihu.com/p/75307407?from_voters_page=true">图神经网络</a></p><p><a href="https://blog.csdn.net/weixin_48629412/article/details/111174968">多模态特征表示和融合</a></p><p><a href="https://zhuanlan.zhihu.com/p/54356280">Bert详解</a></p><h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><p><a href="https://www.zhihu.com/question/20455227/answer/370658612">特征工程中的「归一化」有什么作用？</a></p><p><a href="https://blog.csdn.net/weixin_36604953/article/details/102652160">标准化和归一化，请勿混为一谈，透彻理解数据变换</a></p><p><a href="https://zhuanlan.zhihu.com/p/24810318">什么是批标准化 (Batch Normalization)</a></p><p><a href="https://www.zhihu.com/question/20467170">标准化和归一化什么区别？</a></p><ol><li><blockquote><p>缩放到均值为0，方差为1（<strong>Standardization——</strong>StandardScaler()）</p></blockquote></li><li><blockquote><p>缩放到0和1之间（<strong>Standardization——</strong>MinMaxScaler()）</p></blockquote></li><li><blockquote><p>缩放到-1和1之间（<strong>Standardization——</strong>MaxAbsScaler()）</p></blockquote></li><li><blockquote><p>缩放到0和1之间，保留原始数据的分布（<strong>Normalization——</strong>Normalizer()</p></blockquote></li></ol><p><a href="https://blog.csdn.net/liuxiao214/article/details/81037416">BatchNormalization、LayerNormalization、InstanceNorm、GroupNorm、SwitchableNorm总结</a></p><h1 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h1><h2 id="机器学习算法"><a href="#机器学习算法" class="headerlink" title="机器学习算法"></a>机器学习算法</h2><p><a href="https://blog.csdn.net/v_july_v/category_9261611.html">机器学习十大算法系列</a></p><h3 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h3><p><a href="https://www.zhihu.com/question/320426826">感知机</a></p><h3 id="logistic回归"><a href="#logistic回归" class="headerlink" title="logistic回归"></a>logistic回归</h3><p><a href="https://www.cnblogs.com/geo-will/p/10468356.html">logistic回归</a></p><h3 id="EM"><a href="#EM" class="headerlink" title="EM"></a>EM</h3><blockquote><p><a href="https://blog.csdn.net/u010834867/article/details/90762296">EM算法</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/v_july_v/article/details/81708386">如何通俗理解EM算法</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/32925505">从EM到Variational EM</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/u012771351/article/details/53032365">LDA-隐狄利克雷分布-主题模型</a></p></blockquote><h3 id="贝叶斯"><a href="#贝叶斯" class="headerlink" title="贝叶斯"></a>贝叶斯</h3><p><a href="https://www.cnblogs.com/geo-will/p/10468401.html">机器学习|算法笔记-朴素贝叶斯（Naive Bayesian）</a></p><p><a href="https://blog.csdn.net/v_july_v/article/details/40984699">从贝叶斯谈到贝叶斯网络</a></p><p><a href="https://blog.csdn.net/cjneo/article/details/45167223">朴素贝叶斯 VS 逻辑回归 区别</a></p><h3 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h3><p><a href="https://zhuanlan.zhihu.com/p/35755150">推导 | SVM详解（1）SVM基本型</a></p><p><a href="https://www.cnblogs.com/geo-will/p/10503218.html">算法笔记-支持向量机</a></p><h3 id="HMM"><a href="#HMM" class="headerlink" title="HMM"></a><strong>HMM</strong></h3><blockquote><p>***** <strong><a href="https://zhuanlan.zhihu.com/p/29938926">HMM隐马尔科夫模型</a></strong> </p></blockquote><blockquote><p>***** <strong><a href="https://www.cnblogs.com/pinard/p/6945257.html">HMM</a></strong></p></blockquote><blockquote><p>***** <strong><a href="https://blog.csdn.net/weixin_42175217/article/details/105442777?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&spm=1001.2101.3001.4242">HMM2</a></strong></p></blockquote><blockquote><p><strong><a href="https://blog.csdn.net/hudashi/article/details/87867916">隐马尔科夫模型</a></strong></p></blockquote><p><strong>隐马尔可夫模型是 先生成状态序列，然后由状态序列生成观测序列，即是先 P(Z) , 再 P(O|Z), 所以拟合的是 P(O, Z)也就是联合概率分布而判别模型拟合的是条件概率分布。HMM在数据量较少的时候，会脑补数据，性能更好。</strong></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011542241.png"></p><blockquote><p>条件随机场是一种判别式无向图模型，生成式模型是直接对联合分布进行建模，而判别式模型则是对条件分布进行建模，隐马尔科夫模型（HMM）和马尔科夫随机场都是生成模型，而条件随机场(CRF)是判别式模型。CRF可看作给定观测值的马尔科夫随机场。</p></blockquote><p>维特比算法</p><p><a href="https://ah0aangfha.feishu.cn/docs/doccnoVrVCsrIzCEWkxvUlW30hN">Viterbi维特比算法</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="CRF"><a href="#CRF" class="headerlink" title="CRF"></a>CRF</h3><p><a href="https://ah0aangfha.feishu.cn/docs/doccnkchwwM1mp9wrcy9NybCgyg">CRF-条件随机场</a></p><p>为了建一个条件随机场，我们首先要定义一个特征函数集，每个特征函数都以整个句子s，当前位置i，位置i和i-1的标签为输入。然后为每一个特征函数赋予一个权重，然后针对每一个标注序列l，对所有的特征函数加权求和，必要的话，可以把求和的值转化为一个概率值。</p><p><a href="https://www.jianshu.com/p/da49f9a5468c">CRF-条件随机场</a></p><p><a href="https://zhuanlan.zhihu.com/p/70067113">一文理解条件随机场CRF</a></p><p><a href="https://zhuanlan.zhihu.com/p/383307632">机器学习 – 条件随机场 (CRF)</a></p><p><a href="https://zhuanlan.zhihu.com/p/112980214">马尔可夫随机场以及条件随机场</a></p><p><a href="https://www.sohu.com/a/341284906_787107">最通俗易懂的BiLSTM-CRF模型中的CRF层讲</a></p><p><a href="https://anxiang1836.github.io/2019/11/05/NLP_From_HMM_to_CRF/">从隐马尔科夫到条件随机场</a></p><h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p><a href="https://zhuanlan.zhihu.com/p/30059442">决策树(Decision Tree)：通俗易懂之介绍</a></p><p><a href="https://www.cnblogs.com/muzixi/p/6566803.html">决策树–信息增益，信息增益比，Geni指数的理解</a></p><h2 id="其他算法"><a href="#其他算法" class="headerlink" title="其他算法"></a>其他算法</h2><p><a href="https://blog.csdn.net/yangyin007/article/details/82385967">随机森林算法及其实现（Random Forest）</a> </p><h1 id="NER"><a href="#NER" class="headerlink" title="NER"></a>NER</h1><h2 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h2><p><a href="https://www.datafountain.cn/datasets/5684">命名实体识别学习-数据集介绍-conll03</a></p><p><a href="https://blog.csdn.net/StarLib/article/details/106933974">LSTM+CRF序列标注</a></p><h1 id="关系抽取"><a href="#关系抽取" class="headerlink" title="关系抽取"></a>关系抽取</h1><p><a href="https://www.cnblogs.com/sandwichnlp/p/12049829.html">简介</a></p><p><a href="https://zhuanlan.zhihu.com/p/74886839">实体关系联合抽取总结</a></p><p><a href="https://blog.csdn.net/dugudaibo/article/details/79120627">结构学习：序列标注</a></p><h1 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h1><p><a href="https://zhuanlan.zhihu.com/p/358206572">MultiHeadAttention实现详解</a></p><p><a href="http://nlp.seas.harvard.edu/2018/04/03/attention.html">The Annotated Transformer</a></p><p><a href="https://www.jianshu.com/p/87aa03352eb9">循环神经网络（RNN）浅析</a></p><p> <a href="https://www.jianshu.com/p/5a5bcfe5c185">序列标注</a></p><p><a href="https://www.jianshu.com/p/c7c3ace12044">序列标注和中文命名实体识别</a></p><p> <a href="https://www.jianshu.com/p/b2b95f945a98">Seq2Seq模型概述</a></p><p><a href="https://zhuanlan.zhihu.com/p/32085405">人人都能看懂的LSTM</a></p><p> <a href="https://www.jianshu.com/p/1d67638139da">attention机制原理及简单实现</a></p><p><a href="https://blog.csdn.net/baidu_29571167/article/details/89012223">深入理解shortcut</a></p><p><a href="https://blog.csdn.net/qq_38906523/article/details/79838000">Encoder-Decoder</a></p><p><a href="https://zhuanlan.zhihu.com/p/48612853">词向量之BERT</a></p><h1 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h1><p><a href="https://zhuanlan.zhihu.com/p/248017234">bert的输入输出是什么</a></p><p><a href="https://zhuanlan.zhihu.com/p/338817680">Transformer模型详解（图解最完整版）</a></p><p><a href="https://blog.csdn.net/Sakura55/article/details/86679826">深度学习—-Transformer模型之图示进阶篇</a></p><p> <a href="https://www.bilibili.com/video/BV1J441137V6">李宏毅-Transformer</a></p><p> <a href="https://www.bilibili.com/video/BV1H441187js?p=1">60分钟带你掌握NLP BERT理论与实战</a></p><p> <a href="https://www.bilibili.com/video/BV17441137fa/?spm_id_from=333.788.videocard.11">李宏毅-ELMO, BERT, GPT讲解</a></p><p><a href="https://zhuanlan.zhihu.com/p/53682800">nlp中的Attention注意力机制+Transformer详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/52119092">NLP中的RNN、Seq2Seq与attention注意力机制</a></p><p><a href="https://zhuanlan.zhihu.com/p/53682800">nlp中的Attention注意力机制+Transformer详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/48508221">详解Transformer （Attention Is All You Need）</a></p><h2 id="VisionTransformer"><a href="#VisionTransformer" class="headerlink" title="VisionTransformer"></a><a href="https://zhuanlan.zhihu.com/p/348593638">VisionTransformer</a></h2><h1 id="文本分类"><a href="#文本分类" class="headerlink" title="文本分类"></a>文本分类</h1><p> <a href="https://www.cnblogs.com/jiangxinyang/p/10207273.html">文本分类实战</a></p><h1 id="经典模型"><a href="#经典模型" class="headerlink" title="经典模型"></a>经典模型</h1><h2 id="VGG16"><a href="#VGG16" class="headerlink" title="VGG16"></a>VGG16</h2><p><a href="https://www.cnblogs.com/lfri/p/10493408.html">VGG16详解</a></p><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><h1 id="多模态"><a href="#多模态" class="headerlink" title="多模态"></a>多模态</h1><p><a href="https://blog.csdn.net/qq_39388410/article/details/105907097">跨模态检索</a></p><p><a href="https://blog.csdn.net/qq_39388410/article/details/105145074">多模态融合</a></p><h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1><p><a href="https://www.zhihu.com/question/20446337">生成模型和判别模型的区别</a></p><ul><li>生成模型数据量小时更优，判别模型数据量越大越好</li><li>生成模型要求数据独立同分布，判别模型没有要求</li></ul><h1 id="TEMP"><a href="#TEMP" class="headerlink" title="TEMP"></a>TEMP</h1><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><p><a href="https://blog.csdn.net/moxibingdao/article/details/106667760">自监督、半监督、无监督学习，傻傻分不清楚？最新综述来帮你！</a></p><p><a href="https://blog.csdn.net/weixin_39612677/article/details/110394322">有监督学习和无监督学习举例_对比自监督学习</a></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011542242.png"></p><p>建议路线，ng课程入门，知道有哪些算法，大致怎么做，然后去kaggle打个入门赛，别做特征工程，把会的算法全用上。然后放下比赛，开始读这本书，同时看机器学习基石或其他比较数学化的进阶课程，这一步不需要你敲代码，你要会的是滚瓜烂熟的推导，做到这一步，再去kaggle参加奖金赛，阅读kernel，学习state of the art 模型，学习特征工程，再在学习过程中阅读最新的论文或者经典的论文，不断迭代这个过程，别淹死在什么机器学习实战上，有现成的轮子不用，非得费那个劲，除非你科班毕业，代码能力扎实，不然你能不能从头实现一遍决策树对你找不找到工作没有任何一毛钱关系。笔试不会考你如何实现hmm，只会考数据结构与算法，面试只会让你推导。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>目标检测</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p><a href="https://blog.csdn.net/qq_41185868/article/details/82939959">COOC</a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><a href="https://blog.csdn.net/shenxiaolu1984/article/details/51066975">RCNN算法详解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011540036.png"></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU2OTA0NzE2NA==&mid=2247520757&idx=1&sn=b2142d51162be1a7cd630623d3a5c7fc&chksm=fc8670e6cbf1f9f06b2e32468e3109202268b74965e36c1c7a98cf6e5c4c99e195a9c3d483b8&mpshare=1&scene=1&srcid=&sharer_sharetime=1582011815888&sharer_shareid=c73d81b0370cc4a939bc9898cb9ca485&key=0b4875c6227cfa50ef3708eb15d4ec4cb98b5d8bbb54f86c9fa3b46820dfca11663e96eb4e6a4b178ec2250c4bb5748342c95a236af7465b5feec5d85dc84b967a3676828a7654dcddb04d4652ba5ab7f658154d844964b9ac321371a0f45b7c9801b19a418822c09207ee24c11a8418f9e67995d28a3ceac46b08e7d4d4335d&ascene=1&uin=MjkwMTY1ODIzMw==&devicetype=Windows+10+x64&version=6300002f&lang=zh_CN&exportkey=A+RxICSniseW5jejXRKFTRU=&pass_ticket=0RH8B4gIIB4Lo+uaoUXRwutVMQCH1DZpMpAT7TQ6kCkstYyHUtZIs74ekPcxbpMW&wx_header=0">综述</a></p><p><a href="https://mp.weixin.qq.com/s/bDsJFK3LFZjwaMxJiiBUcg">【综述专栏】什么是知识图谱｜知识图谱入门｜概述</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIwMTc4ODE0Mw==&mid=2247515135&idx=1&sn=e1b9a4f8155cc5f27113ec7d1004095a&chksm=96ea647fa19ded69e43302da581c91486430acba9525925354f9b6e7a12a1d7a69beb0d5766b&mpshare=1&scene=1&srcid=1214xRFBwrGRRe8mLwzm63yu&sharer_sharetime=1607934829013&sharer_shareid=17ccc67fa19a9e5072981fc1f40eec60&key=53f955594eae8e1b1532bea5c139a3b43c773f9910ae9af3f3179769ea972f44786fbcb3e81ed3cc8536a698b542f30d0038950c0585b673ca310cdebdff06b09db173671f9f7772049afbc7278f495e298677c3a224105ccb3b3e256e90db69da2fc1359ae7e65c1980ecfda1d6265a4a0cc711db98ea618c29116249cfdd53&ascene=1&uin=MjkwMTY1ODIzMw==&devicetype=Windows+10+x64&version=63000039&lang=zh_CN&exportkey=A4CgOZJ0s9nCDDFN6Iw+dk4=&pass_ticket=Q6YMzN1QllFrS0nE4D/7EGMoGjbyZHskrvM/O1f2U9Omx91MBQm3o8YWgsSjdgZB&wx_header=0">行业知识图谱构建综述</a></p><p> <a href="https://blog.csdn.net/weixin_44343544/article/details/107548092">知识图谱嵌入内容整理</a></p><p> <a href="https://weizhixiaoyi.com/archives/463.html">知识图谱嵌入(KGE)主流模型简介</a></p><p> <a href="https://blog.csdn.net/qq_40006058/article/details/89432773">推荐算法常用评价指标：NDCG、MAP、MRR、HR、ILS、ROC、AUC、F1等</a></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="知识表示"><a href="#知识表示" class="headerlink" title="知识表示"></a>知识表示</h4><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011540037.png"></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011540038.png"></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011540039.png"></p><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><p><a href="https://blog.csdn.net/broccoli2/article/details/102531077">什么是实体对齐、实体消歧、属性对齐？</a></p><h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h1><p><a href="https://zhuanlan.zhihu.com/p/126124250">动态规划</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>torch.nn.LSTM()详解</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Pytorch/torch.nn.lstm/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Pytorch/torch.nn.lstm/</url>
      
        <content type="html"><![CDATA[<h3 id="输入的参数列表包括"><a href="#输入的参数列表包括" class="headerlink" title="输入的参数列表包括:"></a>输入的参数列表包括:</h3><ul><li><code>input_size</code> 输入数据的特征维数，通常就是<code>embedding_dim</code>(词向量的维度)</li><li><code>hidden_size</code> LSTM中隐层的维度，<code>bidirectional</code> &#x3D;True时，<code>hidden_size</code> 减半</li><li><code>num_layers</code> 循环神经网络的层数</li><li><code>bias</code> 用不用偏置，default&#x3D;True</li><li><code>batch_first</code> 这个要注意，通常我们输入的数据shape&#x3D;(<code>batch_size</code>, <code>seq_length</code>, <code>embedding_dim</code>),而<code>batch_first</code>默认是False,所以我们的输入数据最好送进LSTM之前将<code>batch_size</code>与<code>seq_length</code>这两个维度调换</li><li><code>dropout</code> 默认是0，代表不用dropout</li><li><code>bidirectional</code>默认是false，代表不用双向LSTM</li></ul><h3 id="输入数据包括input-h-0-c-0"><a href="#输入数据包括input-h-0-c-0" class="headerlink" title="输入数据包括input,(h_0,c_0):"></a>输入数据包括input,(h_0,c_0):</h3><ul><li><code>input</code>就是shape&#x3D;(<code>seq_length</code>, <code>batch_size</code>, <code>input_size</code>)的张量</li><li><code>h_0</code>是shape&#x3D;(<code>num_layers</code>*<code>num_directions</code>, <code>batch_size</code>, <code>hidden_size</code>)的张量，它包含了在当前这个batch_size中每个句子的初始隐藏状态。其中num_layers就是LSTM的层数。如果<code>bidirectional</code>&#x3D;True, num_directions&#x3D;2,否则就是１，表示只有一个方向。如果<code>bidirectional</code>&#x3D;True，<code>hidden_size</code> &#x2F;&#x2F;2</li><li><code>c_0</code>和<code>h_0</code>的形状相同，它包含的是在当前这个batch_size中的每个句子的初始细胞状态。<code>h_0</code>,<code>c_0</code>如果不提供，那么默认是０。</li></ul><h3 id="输出数据包括output-h-n-c-n"><a href="#输出数据包括output-h-n-c-n" class="headerlink" title="输出数据包括output,(h_n, c_n):"></a>输出数据包括output,(h_n, c_n):</h3><ul><li><code>output</code>的shape&#x3D;(<code>seq_length</code>, <code>batch_size</code>, <code>num_directions</code>*<code>hidden_size</code>),<br>它包含的是LSTM的最后一时间步的输出特征(h_t),ｔ是batch_size中每个句子的长度。</li><li><code>h_n.shape</code>&#x3D;&#x3D;(num_directions * num_layers, batch, hidden_size)</li><li><code>c_n.shape</code>&#x3D;&#x3D;<code>h_n.shape</code></li><li>h_n包含的是句子的最后一个单词（也就是最后一个时间步）的隐藏状态，c_n包含的是句子的最后一个单词的细胞状态，所以 <strong>它们都与句子的长度seq_length无关</strong>。</li><li><code>output[-1]</code>与<code>h_n</code>是相等的，(**只有当<code>bidirectional</code>&#x3D;False时才相等，否则<code>output[-1]</code>是<code>h_n</code>拼接起来的)**，因为<code>output[-1]</code>包含的正是<code>batch_size</code>个句子中每一个句子的最后一个单词的隐藏状态，注意LSTM中的隐藏状态其实就是输出，cell state细胞状态才是LSTM中一直隐藏的，记录着信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">batch_size=<span class="number">3</span></span><br><span class="line">hidden_size=<span class="number">5</span></span><br><span class="line">embedding_dim=<span class="number">6</span></span><br><span class="line">seq_length=<span class="number">4</span></span><br><span class="line">num_layers=<span class="number">1</span></span><br><span class="line">num_directions=<span class="number">1</span></span><br><span class="line">vocab_size=<span class="number">20</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">input_data=np.random.uniform(<span class="number">0</span>,<span class="number">19</span>,size=(batch_size,seq_length))</span><br><span class="line">input_data=torch.from_numpy(input_data).long()</span><br><span class="line">embedding_layer=torch.nn.Embedding(vocab_size,embedding_dim)</span><br><span class="line">lstm_layer=torch.nn.LSTM(input_size=embedding_dim,hidden_size=hidden_size,num_layers=num_layers,</span><br><span class="line">                        bias=<span class="literal">True</span>,batch_first=<span class="literal">False</span>,dropout=<span class="number">0.5</span>,bidirectional=<span class="literal">False</span>)</span><br><span class="line">lstm_input=embedding_layer(input_data)</span><br><span class="line"><span class="keyword">assert</span> lstm_input.shape==(batch_size,seq_length,embedding_dim)</span><br><span class="line">lstm_input.transpose_(<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">assert</span> lstm_input.shape==(seq_length,batch_size,embedding_dim)</span><br><span class="line">output,(h_n,c_n)=lstm_layer(lstm_input)</span><br><span class="line"><span class="keyword">assert</span> output.shape==(seq_length,batch_size,hidden_size)</span><br><span class="line"><span class="keyword">assert</span> h_n.shape==c_n.shape==(num_layers*num_directions,batch_size,hidden_size)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200223114310501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1NDc4ODY1,size_16,color_FFFFFF,t_70" alt="https://img-blog.csdnimg.cn/20200223114310501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ1NDc4ODY1,size_16,color_FFFFFF,t_70"></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011539699.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://blog.csdn.net/m0_45478865/article/details/104455978">torch.nn.LSTM()详解</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>transformers篇-BertTokenizer.encode_plus()方法</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Pytorch/transformers%E7%AF%87-BertTokenizer.encode_plus()%E6%96%B9%E6%B3%95/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Pytorch/transformers%E7%AF%87-BertTokenizer.encode_plus()%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode_plus</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    text: <span class="type">Union</span>[TextInput, PreTokenizedInput, EncodedInput],</span></span><br><span class="line"><span class="params">    text_pair: <span class="type">Optional</span>[<span class="type">Union</span>[TextInput, PreTokenizedInput, EncodedInput]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    add_special_tokens: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    padding: <span class="type">Union</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>, PaddingStrategy] = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    truncation: <span class="type">Union</span>[<span class="built_in">bool</span>, <span class="built_in">str</span>, TruncationStrategy] = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    max_length: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    stride: <span class="built_in">int</span> = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">    is_split_into_words: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    pad_to_multiple_of: <span class="type">Optional</span>[<span class="built_in">int</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    return_tensors: <span class="type">Optional</span>[<span class="type">Union</span>[<span class="built_in">str</span>, TensorType]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    return_token_type_ids: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    return_attention_mask: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    return_overflowing_tokens: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    return_special_tokens_mask: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    return_offsets_mapping: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    return_length: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    verbose: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    **kwargs</span></span><br><span class="line"><span class="params"></span>) -&gt; BatchEncoding:</span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用于将文本转化为bert的输入编码</p><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p><code>text</code> 需要tokenize的文本</p><p><code>max_length</code> 接受文本的最大长度，默认512</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">encoded_inputs = self.encode_plus(text,</span><br><span class="line">                                  text_pair=text_pair,</span><br><span class="line">                                  max_length=max_length,</span><br><span class="line">                                  add_special_tokens=add_special_tokens,</span><br><span class="line">                                  stride=stride,</span><br><span class="line">                                  truncation_strategy=truncation_strategy,</span><br><span class="line">                                  return_tensors=return_tensors,</span><br><span class="line">                                  **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> encoded_inputs[<span class="string">&quot;input_ids&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encoded_input = tokenizer.encode_plus(_, max_length=<span class="number">512</span>, add_special_tokens=<span class="literal">True</span>, pad_to_max_length=<span class="literal">True</span>, return_tensors=<span class="string">&quot;pt&quot;</span>,  truncation=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encode_input[<span class="string">&quot;input_ids&quot;</span>].shape=[<span class="number">1</span>, max_length]<span class="keyword">or</span>[<span class="number">2</span>, max_length]</span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://blog.csdn.net/qq_33293040/article/details/105439750">Transformers包tokenizer.encode()方法源码阅读笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hacintosh Tutorial</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/Hackintosh/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/Hackintosh/</url>
      
        <content type="html"><![CDATA[<ul><li><h1 id="Vmware"><a href="#Vmware" class="headerlink" title="Vmware"></a>Vmware</h1><h2 id="MacOS-11"><a href="#MacOS-11" class="headerlink" title="MacOS 11"></a>MacOS 11</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">smbios.reflectHost= &quot;TRUE&quot;</span><br><span class="line">hw.model = &quot;MacBookPro16,1&quot;</span><br><span class="line">board-id=&quot;Mac-E1008331FDC96864&quot;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/wangchao_cn/article/details/109755360">vm安装11.15教程</a></p><p><a href="https://heipg.cn/tutorial/basic-install-hackintosh-walkthrough.html">教程</a></p><p><a href="https://www.jianshu.com/p/342b322e3841">这可能是对“小白”最友好的黑苹果安装教程（Catalina 10.15.5 安装记录）</a></p><p><a href="https://blog.csdn.net/Su_Yi/article/details/93773558">关于黑苹果的EFI该如何的配置和Config Configuration工具的使用</a></p><p><a href="https://www.jianshu.com/p/22b5e9db1780">黑苹果安装过程（10.13.617G7024）</a></p><p><a href="https://blog.daliansky.net/macOS-BigSur-11.5.2-20G95-Release-version-with-OC-0.7.1-and-Clover-5138-and-PE-original-image.html#more">黑果小兵教程</a></p><p><a href="https://blog.daliansky.net/categories/%E4%B8%8B%E8%BD%BD/">黑果小兵镜像</a></p><p><a href="https://www.apple114.com/pages/macos/">系统下载</a></p><p><a href="https://blog.daliansky.net/Hackintosh-long-term-maintenance-model-checklist.html">黑果小兵机型efi清单</a></p><p>镜像损坏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig en0 down</span><br><span class="line">date 022208102015.20</span><br></pre></td></tr></table></figure><p><a href="https://www.intel.cn/content/www/cn/zh/support/articles/000023781/graphics.html">如何确定英特尔®显卡支持的最大分辨率</a></p><h1 id="黑苹果星球"><a href="#黑苹果星球" class="headerlink" title="黑苹果星球"></a><a href="https://heipg.cn/">黑苹果星球</a></h1><h1 id="OpenCore-文件生成"><a href="#OpenCore-文件生成" class="headerlink" title="OpenCore 文件生成"></a>OpenCore 文件生成</h1><p><a href="https://www.mfpud.com/opencore/ocgenx/">OC Gen-X下载</a></p><h1 id="恢复版安装教程"><a href="#恢复版安装教程" class="headerlink" title="恢复版安装教程"></a><a href="https://heipg.cn/tutorial/install-macos-via-internet-recovery.html">恢复版安装教程</a></h1><ol><li>保证PC能联网，不管是有线还是无线都可以</li><li>将一块硬盘扇区全部删除，用DiskGenius在硬盘的最前端创建1个3G的ESP分区，并格式化。将系统恢复文件和EFI文件拷贝进去。</li><li>用EasyUEFI创建EFI引导，引导到第二部的ESP分区的路径&#x2F;EFI&#x2F;OC&#x2F;opencore.efi文件，保存重启</li><li>进入BIOS，将第三部设置的引导设置为第一位。重启</li><li>安装盘名为<code>NONAME</code></li><li>其他正常安装。</li></ol><p><a href="https://macoshome.com/hackintosh/hcourse/6103.html">https://macoshome.com/hackintosh/hcourse/6103.html</a></p><h1 id="i5-4690k-GTX970"><a href="#i5-4690k-GTX970" class="headerlink" title="i5 4690k+GTX970"></a>i5 4690k+GTX970</h1><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011445612.png"></p><h1 id="惠普战66G1Pro双系统"><a href="#惠普战66G1Pro双系统" class="headerlink" title="惠普战66G1Pro双系统"></a>惠普战66G1Pro双系统</h1><ol><li>划分2个独立的磁盘，一个用DiskGenius创建ESP盘格式化，大约2G，另外一个用windows磁盘管理工具，创建一个盘，不要格式化。（<a href="https://blog.csdn.net/weixin_43971764/article/details/106075438">双系统磁盘创建</a>）</li><li>将EFI文件和恢复版系统拷贝进ESP分区</li><li>用EasyEFI工具创建EFI引导</li><li>其他一样</li></ol><h1 id="OpenCore-Configurator"><a href="#OpenCore-Configurator" class="headerlink" title="OpenCore Configurator"></a>OpenCore Configurator</h1><p><a href="https://macoshome.com/hackintosh/htools/2100.html#Down">下载地址</a></p><p><a href="https://gitee.com/shuiyunxc/OpenCore-Configurator">版本说明</a></p><p><a href="https://macx.top/8780.html">使用教程</a></p><p><a href="http://softwareupdate.vmware.com/cds/vmw-desktop/fusion">vmtools</a></p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011445614.jpg"></p><h2 id="无U盘恢复版教程"><a href="#无U盘恢复版教程" class="headerlink" title="无U盘恢复版教程"></a>无U盘恢复版教程</h2><ol><li>创建ESP分区，建议2G</li><li>将EFI和恢复版系统文件夹拷贝进ESP分区</li><li>启动安装，中间大概重启2-3次</li><li>安装完成</li><li>将EFI文件拷贝进系统盘的ESP分区</li></ol><h2 id="关闭啰嗦模式"><a href="#关闭啰嗦模式" class="headerlink" title="关闭啰嗦模式"></a>关闭啰嗦模式</h2><p>No2.关闭 -v 跑代码（关闭啰嗦模式）</p><p>NVRAM-随机访问寄存器设置 –&gt; 添加 –&gt; UUID：7C436110-AB2A-4BBB-A880-FE41995C9F82</p><p>查找键：<code>boot-args</code></p><p>删除值：<code>-v</code></p><h2 id="切换默认启动磁盘"><a href="#切换默认启动磁盘" class="headerlink" title="切换默认启动磁盘"></a>切换默认启动磁盘</h2><p>启动界面按<code>Ctrl</code>+<code>Enter</code></p><h2 id="声卡设置"><a href="#声卡设置" class="headerlink" title="声卡设置"></a>声卡设置</h2><p>DeviceProperties-设备属性设置</p><p>设备ID：<code>PciRoot(0x0)/Pci(0x1b,0x0)</code>必须存在，否则会无法识别耳机</p><h2 id="显卡设置"><a href="#显卡设置" class="headerlink" title="显卡设置"></a>显卡设置</h2><p>DeviceProperties-设备属性设置</p><p>设备ID：<code>PciRoot(0x0)/Pci(0x2,0x0)</code>必须存在，否则会无法驱动显卡</p><h2 id="添加UEFI引导项"><a href="#添加UEFI引导项" class="headerlink" title="添加UEFI引导项"></a>添加UEFI引导项</h2><p>「注意」使用 Clover 引导时，启动文件可选择 BOOTX64.efi 也可以选择 CLOVERX64.efi；但使用 OpenCore 引导时，启动文件必须选择 BOOTx64.efi，否则会造成莫名其妙的问题，切记切记！</p><h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h1><p><a href="https://www.jianshu.com/p/526975ef197a">mac OS 防止开机自动挂载磁盘&#x2F;USB等外设 - 简书 (jianshu.com)</a></p><h2 id="启动参数说明"><a href="#启动参数说明" class="headerlink" title="启动参数说明"></a>启动参数说明</h2><ul><li>-wegnoegpu 关闭外置GPU</li></ul><h2 id="打补丁教程"><a href="#打补丁教程" class="headerlink" title="打补丁教程"></a>打补丁教程</h2><p><a href="https://zhuanlan.zhihu.com/p/158786596">【黑苹果系列】小白教程之DSD补丁篇 | 7分钟教你优雅定制最关键的OC补丁(clover通用) - 知乎 (zhihu.com)</a></p><h2 id="补丁说明"><a href="#补丁说明" class="headerlink" title="补丁说明"></a>补丁说明</h2><ul><li>SSDT-OC-XOSI.aml 操作系统补丁，能解决OC无法引导windows。</li><li>SSDT-plug.aml 加载CPU原生电源管理（开启节能四项），必须</li><li><a href="https://link.zhihu.com/?target=https://dortania.github.io/Getting-Started-With-ACPI/Universal/ec-fix.html">SSDT-EC-USBX</a>（同SSDT-EC）：禁用EC（Embedded Controller）和修复USB充电问题，可选</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac常用软件</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/Mac%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h1><ul><li><p>BetterAndBetter</p></li><li><p>Alfred</p></li><li><p>Bartender</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VPN</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/VPN/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/VPN/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化所"><a href="#自动化所" class="headerlink" title="自动化所"></a>自动化所</h1><table><thead><tr><th>Address</th><th><a href="http://vpn.ia.ac.cn/">http://vpn.ia.ac.cn</a></th></tr></thead><tbody><tr><td>Account</td><td><a href="mailto:&#118;&#112;&#110;&#49;&#x2e;&#110;&#108;&#x70;&#114;&#x6d;&#109;&#x63;&#x40;&#x6e;&#108;&#112;&#114;&#46;&#x69;&#97;&#46;&#x61;&#x63;&#46;&#x63;&#110;">&#118;&#112;&#110;&#49;&#x2e;&#110;&#108;&#x70;&#114;&#x6d;&#109;&#x63;&#x40;&#x6e;&#108;&#112;&#114;&#46;&#x69;&#97;&#46;&#x61;&#x63;&#46;&#x63;&#110;</a></td></tr><tr><td>Password</td><td>vpn1@2019</td></tr></tbody></table><blockquote><p>Address:     <a href="http://vpn.ia.ac.cn/">http://vpn.ia.ac.cn</a><br>Account:     <a href="mailto:&#118;&#112;&#x6e;&#x31;&#x2e;&#110;&#108;&#112;&#114;&#109;&#109;&#x63;&#64;&#110;&#x6c;&#x70;&#114;&#x2e;&#105;&#x61;&#46;&#97;&#99;&#46;&#x63;&#x6e;">&#118;&#112;&#x6e;&#x31;&#x2e;&#110;&#108;&#112;&#114;&#109;&#109;&#x63;&#64;&#110;&#x6c;&#x70;&#114;&#x2e;&#105;&#x61;&#46;&#97;&#99;&#46;&#x63;&#x6e;</a><br>Password:   vpn1@2019</p></blockquote><p><a href="http://download.sangfor.com.cn/download/product/sslvpn/pkg/mac_ec_sp/EasyConnect.dmg">EasyConnect下载地址</a></p><p><a href="https://202.197.228.8/portal/#!/down_client">https://202.197.228.8/portal/#!/down_client</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows常用软件</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/windows%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>Everything</p><h1 id="FTP工具"><a href="#FTP工具" class="headerlink" title="FTP工具"></a>FTP工具</h1><p><a href="https://www.filezilla.cn/">FileZilla</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>硬件检测</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/%E7%A1%AC%E4%BB%B6%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="硬件检测"><a href="#硬件检测" class="headerlink" title="硬件检测"></a>硬件检测</h1><h2 id="硬盘速度"><a href="#硬盘速度" class="headerlink" title="硬盘速度"></a>硬盘速度</h2><h3 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h3><ul><li>DiskSpeedTest</li></ul><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><ul><li><p>ASSSD</p></li><li><p>CrystalDisk</p></li></ul><p><a href="https://www.laobuluo.com/6188.html">十大磁盘检测工具</a></p><p><a href="https://drivers.softpedia.com/dyn-search.php?search_term=Z97-D3H">D3H驱动下载</a></p><p><a href="https://drivers.softpedia.com/get/BIOS/?utm_source=spd&utm_campaign=postdl_redir">驱动下载</a></p><p><a href="http://www.xitongcheng.com/jiaocheng/dnrj_article_52835.html">更新驱动教程</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++基础知识</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Language/C++/C++/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Language/C++/C++/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.empty()</span><br><span class="line">s.size()</span><br></pre></td></tr></table></figure><p>读写一行字符串：<code>getline(cin, line)</code></p><blockquote><p>atoi(char) 头文件 #include <cstdlib><br><code>atoi(line.c_str())</code>记住要转为C风格字符串</p></blockquote><h3 id="处理string中的字符"><a href="#处理string中的字符" class="headerlink" title="处理string中的字符"></a>处理string中的字符</h3><p>头文件：<code>#include &lt;cctype&gt;</code></p><blockquote><p>是否是字符数字：<code> isalnum(c)</code><br>是否是字母：<code>isalpha(c)</code><br>是否是小写字母：<code>islower(c)</code><br>是否是大写字母：<code>isupper(c)</code><br>是否是数字：<code>isdigit(c)</code><br>是否是16进制数字：<code>isxdigit(c)</code><br>转小写字母：<code>tolower(c)</code><br>转大写字母：<code>toupper(c)</code><br>是否是标点符号：<code>ispunct(c)</code></p></blockquote><h4 id="Demo-code"><a href="#Demo-code" class="headerlink" title="Demo code"></a>Demo code</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string input;</span><br><span class="line">    <span class="built_in">getline</span>(cin,input);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;sentence：&quot;</span>+input&lt;&lt;endl;</span><br><span class="line">    string s=<span class="string">&quot;Hello World!!!&quot;</span>;</span><br><span class="line">    <span class="type">int</span> cnt_punct=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c :s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">ispunct</span>(c))</span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt_punct;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt_punct&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>string.split()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stringsplit</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">const</span> <span class="type">char</span> split, vector&lt;string&gt;&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="string">&quot;&quot;</span>)      <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//在字符串末尾也加入分隔符，方便截取最后一段</span></span><br><span class="line">    string strs = str + split;</span><br><span class="line">    <span class="type">size_t</span> pos = strs.<span class="built_in">find</span>(split);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若找不到内容则字符串搜索函数返回 npos</span></span><br><span class="line">    <span class="keyword">while</span> (pos != strs.npos)</span><br><span class="line">    &#123;</span><br><span class="line">        string temp = strs.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">        res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="comment">//去掉已分割的字符串,在剩下的字符串中进行分割</span></span><br><span class="line">        strs = strs.<span class="built_in">substr</span>(pos + <span class="number">1</span>, strs.<span class="built_in">size</span>());</span><br><span class="line">        pos = strs.<span class="built_in">find</span>(split);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字符串分割</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stringsplit</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">const</span> string&amp; splits, vector&lt;string&gt;&amp; res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="string">&quot;&quot;</span>)      <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//在字符串末尾也加入分隔符，方便截取最后一段</span></span><br><span class="line">    string strs = str + splits;</span><br><span class="line">    <span class="type">size_t</span> pos = strs.<span class="built_in">find</span>(splits);</span><br><span class="line">    <span class="type">int</span> step = splits.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若找不到内容则字符串搜索函数返回 npos</span></span><br><span class="line">    <span class="keyword">while</span> (pos != strs.npos)</span><br><span class="line">    &#123;</span><br><span class="line">        string temp = strs.<span class="built_in">substr</span>(<span class="number">0</span>, pos);</span><br><span class="line">        res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">        <span class="comment">//去掉已分割的字符串,在剩下的字符串中进行分割</span></span><br><span class="line">        strs = strs.<span class="built_in">substr</span>(pos + step, strs.<span class="built_in">size</span>());</span><br><span class="line">        pos = strs.<span class="built_in">find</span>(splits);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;string&gt; strList;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(<span class="string">&quot;This-is-a-test&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">Stringsplit</span>(str, <span class="string">&#x27;-&#x27;</span>, strList);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : strList)</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    vector&lt;string&gt; strList2;</span><br><span class="line">    <span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;This%20is%20a%20test&quot;</span>)</span></span>;</span><br><span class="line">    <span class="built_in">Stringsplit</span>(str2, <span class="string">&quot;%20&quot;</span>, strList2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> s : strList2)</span><br><span class="line">        cout &lt;&lt; s &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/2236.html">C++ string详解，C++字符串详解</a></p><p><a href="https://www.jianshu.com/p/7b0e25d6c2c8">C++ string的常用操作</a></p><h2 id="List-双向链表"><a href="#List-双向链表" class="headerlink" title="List 双向链表"></a>List 双向链表</h2><p><a href="http://c.biancheng.net/view/6892.html">C++ list（STL list）容器完全攻略（超级详细）</a></p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    array&lt;<span class="type">int</span>, 4&gt; values&#123;&#125;;</span><br><span class="line">    <span class="comment">//初始化 values 容器为 &#123;0,1,2,3&#125;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; values.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        values.<span class="built_in">at</span>(i) = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用 get() 重载函数输出指定位置元素</span></span><br><span class="line">    cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">3</span>&gt;(values) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//如果容器不为空，则输出容器中所有的元素</span></span><br><span class="line">    <span class="keyword">if</span> (!values.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> val = values.<span class="built_in">begin</span>(); val &lt; values.<span class="built_in">end</span>(); val++) &#123;</span><br><span class="line">            cout &lt;&lt; *val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/6688.html">C++ array(STL array)容器用法详解</a></p><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><p>尾部添加元素：<code>push_back()</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vals,sub;</span><br><span class="line">    vals.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vals.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    vals.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    sub.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    sub.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    vals.<span class="built_in">insert</span>(vals.<span class="built_in">begin</span>()+<span class="number">1</span>,sub.<span class="built_in">begin</span>(), sub.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a:vals) cout&lt;&lt;a&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/6749.html">C++ STL vector容器详解</a></p><h2 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h2><p>queue 和 stack 有一些成员函数相似，但在一些情况下，工作方式有些不同：</p><ul><li><p>front()：返回 queue 中第一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</p></li><li><p>back()：返回 queue 中最后一个元素的引用。如果 queue 是常量，就返回一个常引用；如果 queue 为空，返回值是未定义的。</p></li><li><p>push(const T&amp; obj)：在 queue 的尾部添加一个元素的副本。这是通过调用底层容器的成员函数 push_back() 来完成的。</p></li><li><p>push(T&amp;&amp; obj)：以移动的方式在 queue 的尾部添加元素。这是通过调用底层容器的具有右值引用参数的成员函数 push_back() 来完成的。</p></li><li><p>pop()：删除 queue 中的第一个元素。</p></li><li><p>size()：返回 queue 中元素的个数。</p></li><li><p>empty()：如果 queue 中没有元素的话，返回 true。</p></li><li><p>emplace()：用传给 emplace() 的参数调用 T 的构造函数，在 queue 的尾部生成对象。</p></li><li><p>swap(queue<T> &amp;other_q)：将当前 queue 中的元素和参数 queue 中的元素交换。它们需要包含相同类型的元素。也可以调用全局函数模板 swap() 来完成同样的操作。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    deque&lt;<span class="type">double</span>&gt; values &#123;<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>, <span class="number">4.5</span>&#125;; </span><br><span class="line">    <span class="function">queue&lt;<span class="type">double</span>&gt; <span class="title">numbers</span><span class="params">(values)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        numbers.<span class="built_in">push</span>(i); <span class="comment">//队尾添加元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!numbers.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt;numbers.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">// 查询队首</span></span><br><span class="line">        numbers.<span class="built_in">pop</span>();  <span class="comment">// 弹出队首</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/479.html">C++ queue(STL queue)用法详</a><strong><a href="http://c.biancheng.net/view/479.html">解</a></strong></p><h2 id="deque-双边队列"><a href="#deque-双边队列" class="headerlink" title="deque 双边队列"></a>deque 双边队列</h2><p><a href="http://c.biancheng.net/view/6860.html">C++ STL deque容器（详解版）</a></p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p>下面是 stack 容器可以提供的一套完整操作：</p><ul><li><p>top()：返回一个栈顶元素的引用，类型为 T&amp;。如果栈为空，返回值未定义。</p></li><li><p>push(const T&amp; obj)：可以将对象副本压入栈顶。这是通过调用底层容器的 push_back() 函数完成的。</p></li><li><p>push(T&amp;&amp; obj)：以移动对象的方式将对象压入栈顶。这是通过调用底层容器的有右值引用参数的 push_back() 函数完成的。</p></li><li><p>pop()：弹出栈顶元素。</p></li><li><p>size()：返回栈中元素的个数。</p></li><li><p>empty()：在栈中没有元素的情况下返回 true。</p></li><li><p>emplace()：用传入的参数调用构造函数，在栈顶生成对象。</p></li><li><p>swap(stack<T> &amp; other_stack)：将当前栈中的元素和参数中的元素交换。参数所包含元素的类型必须和当前栈的相同。对于 stack 对象有一个特例化的全局函数 swap() 可以使用。</p></li></ul><h3 id="Demo-code-1"><a href="#Demo-code-1" class="headerlink" title="Demo code"></a>Demo code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    list&lt;string&gt; ls&#123;<span class="string">&quot;java&quot;</span>,<span class="string">&quot;python&quot;</span>,<span class="string">&quot;go&quot;</span>,<span class="string">&quot;c++&quot;</span>&#125;;</span><br><span class="line">    stack&lt;string,list&lt;string&gt;&gt; <span class="built_in">st</span>(ls);</span><br><span class="line">    st.<span class="built_in">emplace</span>(<span class="string">&quot;ruby&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(!st.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;st.<span class="built_in">top</span>()&lt;&lt;endl;</span><br><span class="line">        st.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/478.html">C++ stack(STL stack)用法详解</a></p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>底层用的红黑树，会自动按照key排序，如果不需要排序，建议使用<code>unordered_map</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt; myMap&#123; &#123;<span class="string">&quot;c&quot;</span>,<span class="number">10</span>&#125;,&#123;<span class="string">&quot;d&quot;</span>,<span class="number">20</span>&#125; &#125;;</span><br><span class="line">    map&lt;string, <span class="type">int</span>&gt;<span class="built_in">newMap</span>(++myMap.<span class="built_in">begin</span>(), myMap.<span class="built_in">end</span>());</span><br><span class="line">    myMap.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;java&quot;</span>,<span class="number">30</span>));    </span><br><span class="line">    myMap.<span class="built_in">emplace</span>(<span class="built_in">pair</span>&lt;string, <span class="type">int</span>&gt;(<span class="string">&quot;go&quot;</span>, <span class="number">5</span>));</span><br><span class="line">    myMap.<span class="built_in">emplace</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;C++&quot;</span>,<span class="number">40</span>));</span><br><span class="line">    <span class="keyword">auto</span> itera = myMap.<span class="built_in">find</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(itera!= myMap.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout&lt;&lt;itera-&gt;second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p : myMap)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;p.first&lt;&lt;<span class="string">&quot;\t&quot;</span>&lt;&lt;p.second&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/7173.html">C++ STL map容器详解</a></p><p><a href="http://c.biancheng.net/view/7231.html">C++ STL unordered_map容器用法详解</a></p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    set&lt;string&gt; sets&#123;<span class="string">&quot;c++&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;go&quot;</span>&#125;;</span><br><span class="line">    sets.<span class="built_in">insert</span>(<span class="string">&quot;python&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> a : sets)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    sets.<span class="built_in">erase</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/stl/set/">C++ set容器（STL set容器）</a></p><p><a href="http://c.biancheng.net/view/7192.html">C++ STL set容器完全攻略（超级详细）</a></p><h2 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h2><p>#include <algorithm></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swap(a,b)</span><br></pre></td></tr></table></figure><p>reverse()</p><p>sort()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    array&lt;<span class="type">int</span>,7&gt; a&#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    array&lt;<span class="type">int</span>,4&gt; b&#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:a)</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),[](<span class="type">int</span> a, <span class="type">int</span> b) -&gt; <span class="type">bool</span> &#123; <span class="keyword">return</span> a &gt; b; &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:a)</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">reverse</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:a)</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://c.biancheng.net/view/607.html">C++ unique(STL unique)算法详解</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="comment">// int a[] = &#123;1,2,3,7,6,3,4&#125;;</span></span><br><span class="line">    array&lt;<span class="type">int</span>,7&gt; a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">sizeof</span>(a)/<span class="built_in">sizeof</span>(<span class="type">int</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">sort</span>(<span class="built_in">begin</span>(a), <span class="built_in">end</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">auto</span> end_iter = <span class="built_in">unique</span>(<span class="built_in">begin</span>(a), <span class="built_in">end</span>(a));</span><br><span class="line">    <span class="built_in">copy</span>(<span class="built_in">begin</span>(a), <span class="built_in">end</span>(a), ostream_iterator&lt;<span class="type">int</span>&gt;&#123;cout, <span class="string">&quot; &quot;</span>&#125;);</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t:a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;t&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ylaoda/p/11412081.html">常用算法</a></p><h2 id="Lamda"><a href="#Lamda" class="headerlink" title="Lamda"></a>Lamda</h2><p><a href="http://c.biancheng.net/view/3741.html">C++11 lambda表达式精讲</a></p><p><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html">C++11 lambda表达式</a></p><p>min_element()</p><p>partition()</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">partition(nums.<span class="keyword">begin</span>(), nums.<span class="keyword">end</span>(), [](<span class="keyword">const</span> int n)&#123; <span class="keyword">return</span> n&amp;<span class="number">1</span>; &#125;);</span><br></pre></td></tr></table></figure><h1 id="面试宝典"><a href="#面试宝典" class="headerlink" title="面试宝典"></a>面试宝典</h1><p><a href="https://blog.csdn.net/qq_35034604/article/details/107959429">史上最全的C++面试宝典（合集）</a></p><p><a href="https://blog.csdn.net/y601500359/article/details/105262815">C&#x2F;C++面试宝典2020版(最新版)</a></p><h1 id="待定"><a href="#待定" class="headerlink" title="待定"></a>待定</h1><h6 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;HelloWorld!&quot;</span>&lt;&lt;endl;    </span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string input;</span><br><span class="line">    <span class="comment">// Hello World!</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">getline</span>(cin,input))</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;sentence：&quot;</span>+input&lt;&lt;endl;</span><br><span class="line">        vector&lt;string&gt;  strs;</span><br><span class="line">              </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Hello World&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Language/Java/Java/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Language/Java/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="basic-Language"><a href="#basic-Language" class="headerlink" title="basic Language"></a>basic Language</h1><p>HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HelloChina</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p><a href="https://www.cnblogs.com/liuyongyu/p/12457195.html">和的区别</a></p><h2 id="常见类"><a href="#常见类" class="headerlink" title="常见类"></a>常见类</h2><p><a href="https://baijiahao.baidu.com/s?id=1653790035315010634&wfr=spider&for=pc">ThreadLocal</a></p><h1 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h1><h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h2><p><a href="https://blog.csdn.net/diaoling1990/article/details/82356747">新建项目</a></p><h2 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h2><p><a href="https://www.jianshu.com/p/e8dec95c4326">Groovy 语言快速入门</a></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p><a href="https://blog.csdn.net/qq8693/article/details/86166953">SpringBoot+MyBatis整合中的坑以及Property ‘sqlSessionFactory’ or ‘sqlSessionTemplate’ are required错误详解</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python入门</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Language/Python/Python/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Language/Python/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017024645952992">廖雪峰python教程</a></p><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/index.html">cookbook</a></p><p><a href="http://c.biancheng.net/view/2380.html">答疑</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="https://www.cnblogs.com/rgxx/p/10899440.html">f-string格式化</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">k=<span class="number">123.45</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;123:5.1f&quot;</span>)</span><br></pre></td></tr></table></figure><p>[Python 中下划线的 5 种含义 | 菜鸟教程 (runoob.com)](<a href="https://www.runoob.com/w3cnote/python-5-underline.html#:~:text=%E4%B8%8B%E5%88%92%E7%BA%BF%E5%89%8D%E7%BC%80%E7%9A%84%E5%90%AB%E4%B9%89%E6%98%AF%E5%91%8A%E7%9F%A5%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BA%8F%E5%91%98%EF%BC%9A%E4%BB%A5%E5%8D%95%E4%B8%AA%E4%B8%8B%E5%88%92%E7%BA%BF%E5%BC%80%E5%A4%B4%E7%9A%84%E5%8F%98%E9%87%8F%E6%88%96%E6%96%B9%E6%B3%95%E4%BB%85%E4%BE%9B%E5%86%85%E9%83%A8%E4%BD%BF%E7%94%A8%E3%80%82">https://www.runoob.com/w3cnote/python-5-underline.html#:~:text=下划线前缀的含义是告知其他程序员：以单个下划线开头的变量或方法仅供内部使用。</a> 该约定在PEP 8中有定义。 这不是Python强制规定的。 Python不像Java那样在”私有”和”公共”变量之间有很强的区别。 这就像有人提出了一个小小的下划线警告标志，说： “嘿，这不是真的要成为类的公共接口的一部分。 不去管它就好。,” 如果你实例化此类，并尝试访问在__init__构造函数中定义的foo和_bar属性，会发生什么情况？ 让我们来看看： 你会看到_bar中的单个下划线并没有阻止我们”进入”类并访问该变量的值。 这是因为Python中的单个下划线前缀仅仅是一个约定 - 至少相对于变量和方法名而言。 但是，前导下划线的确会影响从模块中导入名称的方式。)</p><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><ul><li><a href="https://www.cnblogs.com/qi-yuan-008/p/12418822.html">python求时间差</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, date</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">elapse</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kw</span>):</span><br><span class="line">        time1 = datetime.now()</span><br><span class="line">        temp = func(*args, **kw)</span><br><span class="line">        time2 = datetime.now()</span><br><span class="line">        elapse = (time2-time1).microseconds/<span class="number">1000</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;time2&#125;</span>-FunctionName:<span class="subst">&#123;func.__name__:&#125;</span>-Elapse:<span class="subst">&#123;elapse:<span class="number">.3</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@elapse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-----Test-----&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python环境配置</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Language/Python/Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Language/Python/Python%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、anaconda"><a href="#一、anaconda" class="headerlink" title="一、anaconda"></a>一、anaconda</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><a href="https://blog.csdn.net/ha_ha_ha233/article/details/87475799">Anaconda安装</a></p><p><a href="http://www.360doc.com/content/18/1209/11/11881101_800396689.shtml">conda和pip比较</a></p><p><strong>创建Python虚拟环境</strong></p><p> 使用 conda create -n your_env_name python&#x3D;X.X（2.7、3.6等） anaconda 命令创建python版本为X.X、名字为your_env_name的虚拟环境。your_env_name文件可以在Anaconda安装目录envs文件下找到。</p><p> <code>conda create -n cs python=3.7</code></p><h2 id="常用功能代码"><a href="#常用功能代码" class="headerlink" title="常用功能代码"></a>常用功能代码</h2><p><a href="https://www.jianshu.com/p/7265011ba3f2">conda 创建&#x2F;删除&#x2F;重命名 环境</a></p><p><strong>查看已有环境</strong></p><p><code>conda env list</code></p><p><strong>切换环境：</strong></p><ul><li><p>windows: <code>conda activate xxx(env name)</code></p></li><li><p>linux: <code>source activate xxx(env name)</code></p></li></ul><p><strong>查看当前环境安装包</strong>：</p><p><code>conda list</code></p><p><strong>查看包版本</strong> </p><p><code>conda list PackageName</code></p><p><strong>复制环境</strong></p><p><code>conda create -n NEWNAME --clone OLDNAME</code></p><p><strong>删除环境</strong></p><p><code>conda remove -n NAME --all</code></p><p><strong>卸载安装包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda uninstall XXX</span><br><span class="line">conda remove XXX</span><br><span class="line">pip uninstall  XXX</span><br></pre></td></tr></table></figure><p> <a href="https://blog.csdn.net/wanttifa/article/details/92845377">更新卸载制定包</a></p><h1 id="二、virtualenv"><a href="#二、virtualenv" class="headerlink" title="二、virtualenv"></a>二、virtualenv</h1><p><a href="https://blog.csdn.net/weixin_41521681/article/details/98070414">python虚拟环境： conda create与 virtualenv对比</a></p><p><strong>安装virtualenv</strong></p><p>​    <code>pip install virtualenv</code></p><p><strong>创建虚拟环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject</span><br><span class="line">cd myproject</span><br><span class="line">virtualenv venv</span><br></pre></td></tr></table></figure><blockquote><p>创建了一个名为myproject的文件夹，然后这里边创建虚拟环境venv。</p></blockquote><p>在创建virtualenv时增加–no-site-packages 选项的virtualenv就不会读取系统包，如下：</p><p><code>virtualenv nowamagic_venv --no-site-packages</code></p><p>–distribute选项使virtualenv使用新的基于发行版的包管理系统而不是 setuptools 获得的包。 你现在需要知道的就是 –distribute 选项会自动在新的虚拟环境中安装 pip ，这样就不需要手动安装了。 当你成为一个更有经验的Python开发者，你就会明白其中细节。</p><p><code>virtualenv --distribute nowamagic_venv</code></p><p><strong>激活虚拟环境</strong></p><p>Linux: <code> venv/bin/activate</code>     或者    <code>source $ENV_BASE_DIR/$ENVIRONMENT_NAME/bin/activate</code></p><p>没有实验，所以暂时写两种方法，如果此时进入到venv虚拟环境文件夹下，可以source bin&#x2F;activate</p><p>Windows:$ <code>venv\scripts\activate</code></p><p><strong>退出环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Language/Python/matplotlib/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Language/Python/matplotlib/</url>
      
        <content type="html"><![CDATA[<h2 id="绘制曲线图"><a href="#绘制曲线图" class="headerlink" title="绘制曲线图"></a>绘制曲线图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">train_losses, train_accuracy = [], []</span><br><span class="line">val_losses, val_accuracy = [], []</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">20</span>):</span><br><span class="line">    epoch_loss, epoch_accuracy = fit(epoch, model, train_loader, phase=<span class="string">&#x27;training&#x27;</span>)</span><br><span class="line">    val_epoch_loss, val_epoch_accuracy = fit(epoch, model, test_loader, phase=<span class="string">&#x27;validation&#x27;</span>)</span><br><span class="line">    train_losses.append(epoch_loss)</span><br><span class="line">    train_accuracy.append(epoch_accuracy)</span><br><span class="line">    val_losses.append(val_epoch_loss)</span><br><span class="line">    val_accuracy.append(val_epoch_accuracy)</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(train_losses) + <span class="number">1</span>), train_losses, marker=<span class="string">&quot;o&quot;</span>, color=<span class="string">&quot;blue&quot;</span>, label=<span class="string">&#x27;training loss&#x27;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(val_losses) + <span class="number">1</span>), val_losses, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;validation loss&#x27;</span>)</span><br><span class="line">plt.legend() </span><br><span class="line">plt.show()</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(train_accuracy) + <span class="number">1</span>), train_accuracy, <span class="string">&#x27;bo&#x27;</span>, label=<span class="string">&#x27;train accuracy&#x27;</span>)</span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(val_accuracy) + <span class="number">1</span>), val_accuracy, <span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;val accuracy&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_40683253/article/details/87376085">Matplotlib - 折线图 plot() 所有用法详解</a></p><p><a href="https://blog.csdn.net/sinat_36219858/article/details/79800460">matplotlib.pyplot.plot()参数详解</a></p><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html">官方资料</a></p><h3 id="绘制正余弦"><a href="#绘制正余弦" class="headerlink" title="绘制正余弦"></a>绘制正余弦</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot as plt</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_len = <span class="number">50</span></span><br><span class="line">train_losses = [math.sin(i/x_len*<span class="number">2</span>*math.pi) <span class="keyword">for</span> i in <span class="keyword">range</span>(x_len)]</span><br><span class="line">val_losses = [math.cos(i/x_len*<span class="number">2</span>*math.pi) <span class="keyword">for</span> i in <span class="keyword">range</span>(x_len)]</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="keyword">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(train_losses) + <span class="number">1</span>), train_losses,marker=<span class="string">&quot;o&quot;</span>, color=<span class="string">&quot;blue&quot;</span>, lineStyle=<span class="string">&quot;-&quot;</span>, label=<span class="string">&#x27;training loss&#x27;</span>)</span><br><span class="line">plt.plot(<span class="keyword">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(val_losses) + <span class="number">1</span>), val_losses, color=<span class="string">&quot;red&quot;</span>, label=<span class="string">&#x27;validation loss&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zip</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/zip/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/zip/</url>
      
        <content type="html"><![CDATA[<h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip [-dDqrS] [-b path] [zipfile [file ...]]</span><br></pre></td></tr></table></figure><ul><li><p>-d : 从 压缩文件内删除指定的文件</p></li><li><p>-D : 压 缩文件内不建立目录名称</p></li><li><p>-q : 不显 示指令执行过程</p></li><li><p>-r : 递 归处理，将指定目录下的所有文件和子目录一并处理</p></li><li><p>-S : 包 含系统和隐藏文件</p></li><li><p>-&lt;压缩效率&gt; 压 缩效率是一个介于1-9的 数值</p></li><li><p>-b : 创建zip文件临时目录</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip </span><br></pre></td></tr></table></figure><h3 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip [-Z] [-cflptTuvz[abjnoqsCDKLMUVWX$/:^]] file[.zip] [file(s) ...] [-d exdir]</span><br></pre></td></tr></table></figure><ul><li>-j : 目录结构不重新创建</li><li>\file[.zip]:待解压的包</li><li>[file(s) …]：要解压的文件，默认解压全部文件</li><li>\ -d : 解压的输出目录,默认当前目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip ***.zip</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MacOS在命令行中打开Sublime Text 3</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/%E6%95%88%E7%8E%87/MacOS%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E6%89%93%E5%BC%80Sublime%20Text%203/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/%E6%95%88%E7%8E%87/MacOS%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E6%89%93%E5%BC%80Sublime%20Text%203/</url>
      
        <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>在终端中输入命令来创建软链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sv <span class="string">&quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot;</span> /usr/local/bin/subl</span><br></pre></td></tr></table></figure><p>如果Sublime Text是版本v2，则使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sv <span class="string">&quot;/Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl&quot;</span> /usr/local/bin/subl</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在命令行执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subl text.cpp</span><br></pre></td></tr></table></figure><p>就可以直接打开文件啦。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://gist.github.com/martinbuberl/5823ed247d279d1a2d06">Launch Sublime Text from the command line on OSX</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 20.04 安装vncserver</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Tools/%E6%95%88%E7%8E%87/Ubuntu%2020.04%20%E5%AE%89%E8%A3%85vncserver/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Tools/%E6%95%88%E7%8E%87/Ubuntu%2020.04%20%E5%AE%89%E8%A3%85vncserver/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-vnc-on-ubuntu-18-04">18安装教程</a></p><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line">apt update</span><br><span class="line">sudo apt install xfce4 xfce4-goodies</span><br><span class="line">sudo apt install tightvncserver</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim delete</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/Vim/Vim-delete/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/Linux/Linux%E5%91%BD%E4%BB%A4/Vim/Vim-delete/</url>
      
        <content type="html"><![CDATA[<h3 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h3><ul><li><strong>如何在VIM中删除某一行：</strong></li></ul><p>在VIM的命令模式下，使用dd，即可删除光标所在的行。</p><ul><li><strong>如何在VIM中删除多行：</strong></li></ul><p>比如要删除8-17行，在VIM模式下，输入:8,17d，即可将8-17行全部删除。</p><ul><li><strong>如何在VIM中显示行号：</strong></li></ul><p>在VIM命令模式下，输入:set nu。</p><p><strong>误删后如何恢复：</strong></p><p>在VIM命令模式下，输入u。（与u相反的操作 <strong>Ctrl-r</strong>）</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Linux命令 </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/CSBasic/Picgo/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/CSBasic/Picgo/</url>
      
        <content type="html"><![CDATA[<p>github图床token：  </p><p>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</p><p>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</p><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011529732.png"></p><p>Azure图床Token：</p><blockquote><p> f6sojl3lhkb5li6et4f6lju5iero3prmrhnwutbu7cvekvqdmc3a</p></blockquote><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011529733.png"></p><p>gitee图床Token:     </p><blockquote><p>20cb20695f760aab0584df65c7b58fac<br>d25228266c2bf8f75073d220518dd7e4</p></blockquote><p><img src="https://raw.githubusercontent.com/ConanSteve/images/master/blog/202204011529734.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>隐马尔科夫模型HMM（四）维特比算法解码隐藏状态序列</title>
      <link href="/2022/02/01/Notebooks/ComputerScience/MachineLearning/HMM/%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8BHMM%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95%E8%A7%A3%E7%A0%81%E9%9A%90%E8%97%8F%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97/"/>
      <url>/2022/02/01/Notebooks/ComputerScience/MachineLearning/HMM/%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8BHMM%EF%BC%88%E5%9B%9B%EF%BC%89%E7%BB%B4%E7%89%B9%E6%AF%94%E7%AE%97%E6%B3%95%E8%A7%A3%E7%A0%81%E9%9A%90%E8%97%8F%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>隐马尔科夫模型HMM（四）维特比算法解码隐藏状态序列</p><p>在本篇我们会讨论HMM模型最后一个问题的求解，即即给定模型和观测序列，求给定观测序列条件下，最可能出现的对应的隐藏状态序列。在阅读本篇前，建议先阅读这个系列的第一篇以熟悉HMM模型。</p><p>HMM模型的解码问题最常用的算法是维特比算法，当然也有其他的算法可以求解这个问题。同时维特比算法是一个通用的求序列最短路径的动态规划算法，也可以用于很多其他问题，比如之前讲到的<a href="http://www.cnblogs.com/pinard/p/6677078.html">文本挖掘的分词原理</a>中我们讲到了单独用维特比算法来做分词。</p><p>本文关注于用维特比算法来解码HMM的的最可能隐藏状态序列。</p><p>在HMM模型的解码问题中，给定模型$\lambda &#x3D; (A, B, \Pi)$和观测序列$O &#x3D;{o_1,o_2,…o_T}$，求给定观测序列O条件下，最可能出现的对应的状态序列$I^*&#x3D; {i_1^*,i_2^*,…i_T^<em>}$,即$P(I^</em>|O)$要最大化。</p><p>一个可能的近似解法是求出观测序列$O$在每个时刻$t$最可能的隐藏状态$i_t^*$然后得到一个近似的隐藏状态序列$I^*&#x3D; {i_1^*,i_2^*,…i_T^<em>}$。要这样近似求解不难，利用<a href="http://www.cnblogs.com/pinard/p/6955871.html">隐马尔科夫模型HMM（二）前向后向算法评估观察序列概率</a>中第五节的定义：在给定模型$\lambda$和观测序列$O$时，在时刻$t$处于状态$q_i$的概率是$\gamma_t(i)$，这个概率可以通过HMM的前向算法与后向算法计算。这样我们有：$$i_t^</em> &#x3D; arg \max_{1 \leq i \leq N}[\gamma_t(i)], ; t &#x3D;1,2,…T$$</p><p>近似算法很简单，但是却不能保证预测的状态序列是整体是最可能的状态序列，因为预测的状态序列中某些相邻的隐藏状态可能存在转移概率为0的情况。</p><p>而维特比算法可以将HMM的状态序列作为一个整体来考虑，避免近似算法的问题，下面我们来看看维特比算法进行HMM解码的方法。</p><p>既然是动态规划算法，那么就需要找到合适的局部状态，以及局部状态的递推公式。在HMM中，维特比算法定义了两个局部状态用于递推。</p><p>第一个局部状态是在时刻$t$隐藏状态为$i$所有可能的状态转移路径$i_1,i_2,…i_t$中的概率最大值。记为$\delta_t(i)$:$$\delta_t(i) &#x3D; \max_{i_1,i_2,…i_{t-1}};P(i_t&#x3D;i, i_1,i_2,…i_{t-1},o_t,o_{t-1},…o_1|\lambda),; i &#x3D;1,2,…N$$</p><p>由$\delta_t(i)$的定义可以得到$\delta$的递推表达式：$$\begin{align} \delta_{t+1}(i) &amp; &#x3D; \max_{i_1,i_2,…i_{t}};P(i_{t+1}&#x3D;i, i_1,i_2,…i_{t},o_{t+1},o_{t},…o_1|\lambda) \ &amp; &#x3D; \max_{1 \leq j \leq N};[\delta_t(j)a_{ji}]b_i(o_{t+1})\end{align}$$</p><p>第二个局部状态由第一个局部状态递推得到。我们定义在时刻$t$隐藏状态为$i$的所有单个状态转移路径$(i_1,i_2,…,i_{t-1},i)$中概率最大的转移路径中第$t-1$个节点的隐藏状态为$\Psi_t(i)$,其递推表达式可以表示为：$$\Psi_t(i) &#x3D; arg ; \max_{1 \leq j \leq N};[\delta_{t-1}(j)a_{ji}]$$</p><p>有了这两个局部状态，我们就可以从时刻0一直递推到时刻$T$，然后利用$\Psi_t(i)$记录的前一个最可能的状态节点回溯，直到找到最优的隐藏状态序列。</p><p>现在我们来总结下维特比算法的流程：</p><p>输入：HMM模型$\lambda &#x3D; (A, B, \Pi)$，观测序列$O&#x3D;(o_1,o_2,…o_T)$</p><p>输出：最有可能的隐藏状态序列$I^*&#x3D; {i_1^*,i_2^*,…i_T^*}$</p><ol start="2"><li><p>进行动态规划递推时刻$t&#x3D;2,3,…T$时刻的局部状态：$$\delta_{t}(i) &#x3D; \max_{1 \leq j \leq N};[\delta_{t-1}(j)a_{ji}]b_i(0_{t}),;i&#x3D;1,2…N$$$$\Psi_t(i) &#x3D; arg ; \max_{1 \leq j \leq N};[\delta_{t-1}(j)a_{ji}],;i&#x3D;1,2…N$$</p></li><li><p>计算时刻$T$最大的$\delta_{T}(i)$,即为最可能隐藏状态序列出现的概率。计算时刻$T$最大的$\Psi_t(i)$,即为时刻$T$最可能的隐藏状态。$$P* &#x3D; \max_{1 \leq j \leq N}\delta_{T}(i)$$$$i_T^* &#x3D; arg ; \max_{1 \leq j \leq N};[\delta_{T}(i)]$$</p></li><li><p>利用局部状态$\Psi(i)$开始回溯。对于$t&#x3D;T-1,T-2,…,1$：$$i_t^* &#x3D; \Psi_{t+1}(i_{t+1}^*)$$</p></li></ol><p>最终得到最有可能的隐藏状态序列$I^*&#x3D; {i_1^*,i_2^*,…i_T^*}$</p><p>我们的观察集合是:$$V&#x3D;{红，白}，M&#x3D;2$$</p><p>我们的状态集合是：$$Q &#x3D;{盒子1，盒子2，盒子3}， N&#x3D;3 $$</p><p>而观察序列和状态序列的长度为3.</p><p>初始状态分布为：$$\Pi &#x3D; (0.2,0.4,0.4)^T$$</p><p>状态转移概率分布矩阵为：</p><p>$$A &#x3D; \left( \begin{array} {ccc} 0.5 &amp; 0.2 &amp; 0.3 \ 0.3 &amp; 0.5 &amp; 0.2 \ 0.2 &amp; 0.3 &amp;0.5 \end{array} \right) $$</p><p>观测状态概率矩阵为：</p><p>$$B &#x3D; \left( \begin{array} {ccc} 0.5 &amp; 0.5 \ 0.4 &amp; 0.6 \ 0.7 &amp; 0.3 \end{array} \right) $$</p><p>球的颜色的观测序列:$$O&#x3D;{红，白，红}$$</p><p>按照我们上一节的维特比算法，首先需要得到三个隐藏状态在时刻1时对应的各自两个局部状态，此时观测状态为1：</p><p>$$\delta_1(1) &#x3D; \pi_1b_1(o_1) &#x3D; 0.2 \times 0.5 &#x3D; 0.1$$</p><p>$$\delta_1(2) &#x3D; \pi_2b_2(o_1) &#x3D; 0.4 \times 0.4 &#x3D; 0.16$$</p><p>$$\delta_1(3) &#x3D; \pi_3b_3(o_1) &#x3D; 0.4 \times 0.7 &#x3D; 0.28$$</p><p>$$\Psi_1(1)&#x3D;\Psi_1(2) &#x3D;\Psi_1(3) &#x3D;0$$</p><p>现在开始递推三个隐藏状态在时刻2时对应的各自两个局部状态，此时观测状态为2：</p><p>$$\delta_2(1) &#x3D; \max_{1\leq j \leq 3}[\delta_1(j)a_{j1}]b_1(o_2) &#x3D; \max_{1\leq j \leq 3}[0.1 \times 0.5, 0.16 \times 0.3, 0.28\times 0.2] \times 0.5 &#x3D; 0.028$$</p><p>$$\Psi_2(1)&#x3D;3$$</p><p>$$\delta_2(2) &#x3D; \max_{1\leq j \leq 3}[\delta_1(j)a_{j2}]b_2(o_2) &#x3D; \max_{1\leq j \leq 3}[0.1 \times 0.2, 0.16 \times 0.5, 0.28\times 0.3] \times 0.6 &#x3D; 0.0504$$</p><p>$$\Psi_2(2)&#x3D;3$$</p><p>$$\delta_2(3) &#x3D; \max_{1\leq j \leq 3}[\delta_1(j)a_{j3}]b_3(o_2) &#x3D; \max_{1\leq j \leq 3}[0.1 \times 0.3, 0.16 \times 0.2, 0.28\times 0.5] \times 0.3 &#x3D; 0.042$$</p><p>$$\Psi_2(3)&#x3D;3$$</p><p>继续递推三个隐藏状态在时刻3时对应的各自两个局部状态，此时观测状态为1：</p><p>$$\delta_3(1) &#x3D; \max_{1\leq j \leq 3}[\delta_2(j)a_{j1}]b_1(o_3) &#x3D; \max_{1\leq j \leq 3}[0.028 \times 0.5, 0.0504 \times 0.3, 0.042\times 0.2] \times 0.5 &#x3D; 0.00756$$</p><p>$$\Psi_3(1)&#x3D;2$$</p><p>$$\delta_3(2) &#x3D; \max_{1\leq j \leq 3}[\delta_2(j)a_{j2}]b_2(o_3) &#x3D; \max_{1\leq j \leq 3}[0.028 \times 0.2, 0.0504\times 0.5, 0.042\times 0.3] \times 0.4 &#x3D; 0.01008$$</p><p>$$\Psi_3(2)&#x3D;2$$</p><p>$$\delta_3(3) &#x3D; \max_{1\leq j \leq 3}[\delta_2(j)a_{j3}]b_3(o_3) &#x3D; \max_{1\leq j \leq 3}[0.028 \times 0.3, 0.0504 \times 0.2, 0.042\times 0.5] \times 0.7 &#x3D; 0.0147$$</p><p>$$\Psi_3(3)&#x3D;3$$</p><p>此时已经到最后的时刻，我们开始准备回溯。此时最大概率为$\delta_3(3)$,从而得到$i_3^* &#x3D;3$</p><p>由于$\Psi_3(3)&#x3D;3$,所以$i_2^* &#x3D;3$, 而又由于$\Psi_2(3)&#x3D;3$,所以$i_1^* &#x3D;3$。从而得到最终的最可能的隐藏状态序列为：$(3,3,3)$</p><p>如果大家看过之前写的<a href="http://www.cnblogs.com/pinard/p/6677078.html">文本挖掘的分词原理</a>中的维特比算法，就会发现这两篇之中的维特比算法稍有不同。主要原因是在中文分词时，我们没有观察状态和隐藏状态的区别，只有一种状态。但是维特比算法的核心是定义动态规划的局部状态与局部递推公式，这一点在中文分词维特比算法和HMM的维特比算法是相同的，也是维特比算法的精华所在。</p><p>维特比算法也是寻找序列最短路径的一个通用方法，和dijkstra算法有些类似，但是dijkstra算法并没有使用动态规划，而是贪心算法。同时维特比算法仅仅局限于求序列最短路径，而dijkstra算法是通用的求最短路径的方法。</p><p>（欢迎转载，转载请注明出处。欢迎沟通交流： <a href="mailto:&#108;&#105;&#x75;&#x6a;&#x69;&#x61;&#110;&#x70;&#x69;&#x6e;&#x67;&#45;&#111;&#x6b;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#109;">&#108;&#105;&#x75;&#x6a;&#x69;&#x61;&#110;&#x70;&#x69;&#x6e;&#x67;&#45;&#111;&#x6b;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#109;</a>）</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
